;
; miner4.a ($5580)
;

; constants
charSPACE                   = $20               ;
willyPageRight              = $05               ;
willyPageLeft               = $06               ;

; OS memory locations
OSWRCH                      = $ffee             ;
OSBYTE                      = $fff4             ;
OSWORD                      = $fff1             ;
vectorEVNTV                 = $0220             ; Event vector, fired at VSYNC to update sound
timeClockB                  = $0297             ; 5 byte clock as read by TIME
countdownIntervalTimer      = $029C             ; 5 byte countdown interval timer (causes an EVENT when it reaches zero)
vduTextCursorXPosition      = $0318             ;
softCharacterDefinitions    = $0c00             ;

; memory locations
energyFieldSpriteOffset     = $3f               ;
collisionFudgeFactor        = $5a               ;
plotSourceSpriteAddressLow  = $77               ;
plotSourceSpriteAddressHigh = $78               ;
currentLevel                = $80               ;
switchTriggered             = $9f               ;

verticalGuardianMODE1Address    = $0400
verticalGuardianMODE1Address1   = $0440
verticalGuardianMODE1Address2   = $0480
verticalGuardianMODE1Address3   = $04c0
spikePlant                  = $0a58             ;
allOtherSpikes              = $0a60             ;
footSprite                  = $0d40             ;
guardianPositions           = $0d80             ;
guardianPositionsCopy       = $0d90             ;
spriteColourMask            = $109b             ; $ff for colour 3, $f0 for colour 2, $0f for colour 1
updatePlayer                = $109c             ;
updatePlayerWithAnimation   = $1423             ;
opcodeForJsrPlot            = $145d             ;
readTwoCharactersFromScreen = $14a7             ;
playerPixelX                = $183a             ;
playerPixelY                = $183b             ;
newPlayerPixelX             = $183c             ;
newPlayerPixelY             = $183d             ;
willyAnimationEOR           = $183f             ;
willyGraphicsPage           = $1840             ;
willySpriteAddressLow       = $1842             ;
willySpriteAddressHigh      = $1843             ;
isInAir                     = $184b             ;
conveyorDirection           = $1854             ;
readOrWriteCachedBackground = $1869             ;
kongBeastSwitchTriggered    = $197f             ;
drawSpecialVerticalSprites  = $1980             ;
doWeMoveEugene              = $19eb             ;
eugeneColourMask            = $199f             ;
drawKong                    = $19ee             ;
eugenePositionY             = $1c48             ;
currentVerticalGuardians    = $1dad             ;
verticalGuardian2           = $1db1             ;
energyFieldSprites          = $1dc1             ;
animateKeysAndUpdateGuardians   = $1e0d         ;

zeroScoreJumper             = $24f8             ;

drawFooterTextOrReturn      = $2500             ;
drawConveyors               = $254d             ;
conveyorX                   = $25a4             ;
showScoreLivesAndLevel      = $25c8             ;
exitPositionX               = $25fe             ;
exitPositionY               = $25ff             ;

checkForChannel3Update      = $303b             ;
channel3Frequency           = $3098             ;
channel2Frequency           = $3099             ;
updateJumpAndFallSounds     = $3146             ;

plot                        = $0f00             ;
copyGuardianSprites         = $1fb5             ;
numbers                     = $2680             ;
roomNumberReached           = $2ff6             ;
keysLeft                    = $2fff             ;
screenStartAddress          = $3280             ; start of visible screen
screenEndAddress            = $6000             ; end of visible screen

resetLevel19Meteors         = $229b             ;
initLevel                   = $28b8             ;
mainEventRoutine            = $3000             ; See MINER3.a
miner3EntryPoint            = $3190             ; See MINER3.a
soundDirect                 = $3075             ;
checkCheatCode              = $30fc             ;

* = $5580

; ***************************************************************************************
;
; start up
;
; ***************************************************************************************
startUp
    ; output 8 line feeds
    ldx #8                                      ;
    lda #10                                     ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    ; wait for key press
    lda #$81                                    ;
    ldx #$ff                                    ;
    ldy #$00                                    ;
    jsr OSBYTE                                  ;
    jmp continue                                ;

    ; [copy protection, four digit code entry - unused]

    !byte $60                                   ; RTS [UNUSED]

    ; $5597
    ; VDU 19,3,3,0,0,0,0,0,0 - set palette colour 3 set to green
    ldx #0                                      ; loop counter
-
    lda setPaletteMessage,x                     ;
    jsr OSWRCH                                  ;
    inx                                         ;
    cpx #setPaletteMessageEnd - setPaletteMessage ;
    bne -                                       ;

    ; output 6 zeros
    lda #0                                      ;
    ldx #6                                      ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    lda #31                                     ; }
    jsr OSWRCH                                  ; }
    lda #11                                     ; } VDU 31, 11, 7 i.e. TAB(11,7)
    jsr OSWRCH                                  ; }
    lda #7                                      ; }
    jsr OSWRCH                                  ; }

    lda #charSPACE                              ;
    ldx #$14                                    ; loop counter
-
    jsr OSWRCH                                  ;
    dex                                         ; output 20 spaces
    bne -                                       ;

    ; press return to stop message
    ldx #0                                      ;
-
    lda pressReturnToStopMessage,x              ;
    inx                                         ;
    jsr OSWRCH                                  ;
    cpx #pressReturnToStopMessageEnd - pressReturnToStopMessage ;
    bne -                                       ;

showEnterCodeMessageAndWaitForReturn
    jsr showEnterCodeAtCell                     ;
    ldy #$ff                                    ;
    ldx #$b6                                    ;
    lda #$81                                    ;
    jsr OSBYTE                                  ;
    cpy #$ff                                    ;
    bne showEnterCodeMessageAndWaitForReturn    ;

showBoxes
    lda #%11111111                              ;
    ldx #8                                      ;
-
    sta softCharacterDefinitions - 1,x          ; store 255 at $0c00-$0c07
    dex                                         ;
    bne -                                       ;

    ; make a box character
    sta $0c08                                   ; %11111111 at $0c08
    sta $0c0f                                   ;          and $0c0f
    lda #%10000001                              ;
    ldx #6                                      ;
-
    sta $0c08,x                                 ;
    dex                                         ;
    bne -                                       ;

    ; make a filled in box
    lda #%00000000                              ;
    sta $0c10                                   ;
    sta $0c17                                   ;
    lda #%01111110                              ;
    ldx #6                                      ;
-
    sta $0c10,x                                 ;
    dex                                         ;
    bne -                                       ;

    lda #31                                     ; VDU 31,8,10
    jsr OSWRCH                                  ;
    lda #8                                      ;
    jsr OSWRCH                                  ;
    lda #10                                     ;
    jsr OSWRCH                                  ;

    ldx #0                                      ; loop counter
-
    lda #charSPACE                              ; VDU 32
    jsr OSWRCH                                  ;
    lda #17                                     ; VDU 17,X = COLOUR X
    jsr OSWRCH                                  ;
    txa                                         ;
    jsr OSWRCH                                  ;
    lda #$80                                    ; Show box character
    jsr OSWRCH                                  ;
    inx                                         ;
    cpx #4                                      ;
    bne -                                       ;

    ; show 7 spaces
    lda #$20                                    ;
    ldx #7                                      ; loop counter
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    ; four copies of space and filled box
    ldx #4                                      ; loop counter
-
    lda #charSPACE                              ;
    jsr OSWRCH                                  ;
    lda #$81                                    ; show filled in box
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    ; show 2 spaces
    lda #$20                                    ;
    jsr OSWRCH                                  ;
    jsr OSWRCH                                  ;

    ; TAB(9,12)
    lda #31                                     ;
    jsr OSWRCH                                  ;
    lda #9                                      ;
    jsr OSWRCH                                  ;
    lda #12                                     ;
    jsr OSWRCH                                  ;

    ; show '1 2 3 4 '
    ldx #'1'                                    ;
-
    txa                                         ;
    jsr OSWRCH                                  ;
    inx                                         ;
    lda #charSPACE                              ;
    jsr OSWRCH                                  ;
    cpx #'5'                                    ;
    bne -                                       ;

    ; Show 'Code' message
    ldx #0                                      ;
-
    lda codeMessage,x                           ;
    jsr OSWRCH                                  ;
    inx                                         ;
    cpx #codeMessageEnd - codeMessage           ;
    bne -                                       ;

    ; show four of: filled box and space
    ldx #0                                      ;
-
    lda #$81                                    ;
    jsr OSWRCH                                  ;
    lda #charSPACE                              ;
    jsr OSWRCH                                  ;
    inx                                         ;
    cpx #4                                      ;
    bne -                                       ;

    ; Show 7 spaces
    lda #charSPACE                              ;
    ldx #7                                      ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    jsr waitForRETURN                           ;

    lda #0                                      ;
    sta $71                                     ;
    ldx #0                                      ;
-
    lda positionShift,x                         ;
    jsr OSWRCH                                  ;
    inx                                         ;
    cpx #positionShiftExtendedEnd - positionShift   ;
    bne -                                       ;

    lda #0                                      ;
    ldx #4                                      ;
-
    sta entryCode - 1,x                         ; store zeros in entry code
    dex                                         ;
    bne -                                       ;

checkNumberKeys
    lda #0                                      ;
    sta $70                                     ;
checkKeys
    ldy #$ff                                    ; }
    ldx $70                                     ; }
    lda keyArray,x                              ; }
    tax                                         ; } check if a number key 1-4 is pressed
    lda #$81                                    ; }
    jsr OSBYTE                                  ; }
    cpy #$ff                                    ; }
    beq numberKeyPressed                        ; if (number key pressed) then branch

    ldy #$ff                                    ; }
    ldx #$b6                                    ; }
    lda #$81                                    ; } check if RETURN is pressed
    jsr OSBYTE                                  ; }
    cpy #$ff                                    ; }
    beq returnPressed                           ; if (RETURN pressed) then branch forward

    inc $70                                     ;
    lda $70                                     ;
    cmp #4                                      ;
    beq checkNumberKeys                         ;
    jmp checkKeys                               ;

; ***************************************************************************************
numberKeyPressed
    lda #18                                     ; GCOL 0,number of key
    jsr OSWRCH                                  ;
    lda #0                                      ;
    jsr OSWRCH                                  ;
    lda $70                                     ;
    jsr OSWRCH                                  ;
    lda #$82                                    ; show character 130
    jsr OSWRCH                                  ;

    ; check for release of key pressed
-
    ldy #$ff                                    ;
    ldx $70                                     ;
    lda keyArray,x                              ;
    tax                                         ;
    lda #$81                                    ;
    jsr OSBYTE                                  ; check for key pressed
    cpy #$ff                                    ;
    beq -                                       ; if (number key still pressed) then branch back

    ldx $71                                     ;
    lda $70                                     ;
    sta entryCode,x                             ;
    jsr updateCursor                            ;
    lda #charSPACE                              ;
    jsr OSWRCH                                  ;
    inc $71                                     ;
    lda $71                                     ;
    cmp #4                                      ;
    bne checkNumberKeys                         ;

    ; output eight backspaces
    ldx #8                                      ;
    lda #8                                      ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;
    lda #0                                      ;
    sta $71                                     ;
    jmp checkNumberKeys                         ;

    !byte $60                                   ; RTS [UNUSED]

; ***************************************************************************************
returnPressed
    lda #15                                     ; }
    ldx #1                                      ; } *FX 15,1 - flush keyboard buffer
    ldy #0                                      ; }
    jsr OSBYTE                                  ; }
    lda #4                                      ;
    jsr OSWRCH                                  ; VDU 4
    jmp continue                                ;

; ***************************************************************************************
updateCursor
    ldx #0                                      ; loop counter
-
    lda positionShift,x                         ;
    jsr OSWRCH                                  ; set cursor position
    inx                                         ;
    cpx #positionShiftEnd - positionShift       ;
    bne -                                       ;

    ; output seven spaces
    lda #charSPACE                              ;
    ldx #7                                      ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;

    lda #31                                     ; TAB(24 + 2*(($71 + 1) & 3), 12)
    jsr OSWRCH                                  ;
    lda $71                                     ;
    clc                                         ;
    adc #1                                      ;
    and #3                                      ;
    asl                                         ;
    clc                                         ;
    adc #24                                     ;
    jsr OSWRCH                                  ;
    lda #12                                     ;
    jsr OSWRCH                                  ;
    lda #$5e                                    ; display the up arrow
    jsr OSWRCH                                  ;
    lda #5                                      ; VDU 5
    jmp OSWRCH                                  ;

; ***************************************************************************************
    ; Enter code at cell
showEnterCodeAtCell
    ldx #0
-
    lda enterCodeAtCell,x
    jsr OSWRCH
    inx
    cpx #enterCodeAtCellEnd - enterCodeAtCell
    bne -

    ; get and show a random code
    lda timeClockB + 4                          ; read byte of clock time
    sta addition                                ; as a source of randomness

    lda countdownIntervalTimer + 4              ; read byte of countdown interval timer
    sta counter                                 ; as a second source of randomness

    lda addition                                ;
-
    cmp #19                                     ;
    bcc +                                       ; if (less than 19) then branch
    sec                                         ;
    sbc #18                                     ; take off 18
    jmp -                                       ; loop back

+
    sta addition                                ;
    clc                                         ;
    adc #'A'                                    ; add 'A' to get a character 'A' to 'R'
    jsr OSWRCH                                  ;

    lda counter                                 ;
-
    cmp #20                                     ;
    bcc +                                       ; if (less than 20) then branch
    sec                                         ;
    sbc #20                                     ; take off 20
    jmp -                                       ;

+
    sta counter                                 ; store result
    cmp #10                                     ;
    bcs showTensDigit                           ; if (ten or more) then branch
showDigitAndSpace
    clc                                         ;
    adc #'0'                                    ; add '0' to digit to get ASCII code
    jsr OSWRCH                                  ; display digit
    lda #charSPACE                              ;
    jmp OSWRCH                                  ; display a space

showTensDigit
    tax                                         ;
    lda #'1'                                    ;
    jsr OSWRCH                                  ; display '1'
    txa                                         ;
    sec                                         ;
    sbc #10                                     ; subtract 10 to get the units digit
    jmp showDigitAndSpace                       ; show the units


; ***************************************************************************************
moveAndPrintSpaces
    ; VDU 31,10,19 - move cursor position
    lda #31                                     ; }
    jsr OSWRCH                                  ; }
    lda #10                                     ; } TAB(10, 19)
    jsr OSWRCH                                  ; }
    lda #19                                     ; }
    jsr OSWRCH                                  ; }

    ; print thirty spaces
    lda #charSPACE                              ;
    ldx #30                                     ;
-
    jsr OSWRCH                                  ;
    dex                                         ;
    bne -                                       ;
    jmp miner3EntryPoint                        ;


    !byte $00, $00, $00, $00, $00               ; [UNUSED]

    ; initial values for locations $00 to $9F
zeroPageDefaults
!pseudopc $0000 {
    ; tune frequencies
    !byte $23, $1f, $1d, $1a, $17, $1d, $17, $17, $16, $1a, $16, $16, $17, $1d, $17, $17
    !byte $23, $1f, $1d, $1a, $17, $1d, $17, $17, $16, $1a, $16, $16, $17, $17, $17, $23
    !byte $1f, $1d, $1a, $17, $1d, $17, $17, $16, $1a, $16, $16, $17, $1d, $17, $17, $23
    !byte $1f, $1d, $1a, $17, $1d, $17, $11, $13, $17, $1d, $17, $13, $13, $13, $00, $00

    ; $0040 - called when a switch is hit
triggerSwitch
    lda #1                          ;
    sta switchTriggered             ;
    lda vduTextCursorXPosition      ;
    rts                             ;

    !byte $00, $00, $00, $08, $05, $ff, $09, $fd    ; [UNUSED]

    ; $0050
switchMessage2
    !byte $1f, $13, $01             ; TAB(19, 1)
switchClearCentreMessage
    !byte $20, $20, $0a, $08, $08   ; two spaces and move down and back
switchClearCentreMessageEnd
switchMessage2End

    !byte $00, $00, $00, $00, $00, $00, $00, $00    ; [UNUSED]

    ; $0060
switchMessage
    !byte $99                       ; the switched switch sprite
    !byte 31, 21, 12                ; TAB(21, 12)
    !byte charSPACE                 ; space
    !byte 10, 8, charSPACE          ; another space below. This removes a section of wall.
switchMessageEnd

    !byte $00, $00, $00, $00, $00, $00, $00, $00    ; [UNUSED]

    ; $0070 [UNUSED]
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; $0090
zeroScore
    ; clear the score (6 digits in 3 BCD bytes)
    lda #0                          ;
    tax                             ;
-
    sta score, x                    ;
    inx                             ;
    cpx #3                          ;
    bne -                           ;
    jmp miner3EntryPoint            ;

    !byte $ff, $00                  ; [UNUSED]
}
zeroPageDefaultsEnd

    ; [UNUSED]
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; 8 poses of willy: 4 walking right and four walking left
    ; $0500
minerWilly
!pseudopc $0500 {
    ; right0
    !byte $00, $33, $77, $33, $33, $33, $11, $33, $66, $ee, $cc, $44, $ee, $cc, $88, $cc
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ff, $ff, $33, $77, $66, $77, $ee, $ee, $77, $bb, $cc, $66, $ee, $77
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right1
    !byte $00, $00, $11, $00, $00, $00, $00, $00, $11, $ff, $ff, $dd, $ff, $ff, $66, $ff
    !byte $88, $88, $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $11, $11, $11, $00, $00, $00, $00, $bb, $bb, $bb, $dd, $ff, $66, $66, $77
    !byte $88, $88, $88, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; right2
willyRight2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $77, $33, $33, $33, $11, $33
    !byte $66, $ee, $cc, $44, $ee, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ff, $ff, $33, $77, $66, $77
    !byte $ee, $ee, $77, $bb, $cc, $66, $ee, $77, $00, $00, $00, $00, $00, $00, $00, $00

    ; right3
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $00, $00, $00, $00, $00
    !byte $11, $ff, $ff, $dd, $ff, $ff, $66, $ff, $88, $88, $00, $00, $88, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $33, $77, $66, $00, $11, $33, $33
    !byte $ff, $ff, $ff, $ff, $ff, $dd, $00, $88, $88, $cc, $ee, $66, $88, $aa, $ee, $44

    ; $0600
    ; left0
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $66, $77, $33, $22, $77, $33, $11, $33, $00, $cc, $ee, $cc, $cc, $cc, $88, $cc
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $77, $77, $ee, $dd, $33, $66, $77, $ee, $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee

    ; left1
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $00, $00, $11, $00, $00, $00
    !byte $88, $ff, $ff, $bb, $ff, $ff, $66, $ff, $00, $00, $88, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $11, $11, $11, $11, $00, $00, $00, $00
    !byte $dd, $dd, $dd, $bb, $ff, $66, $66, $ee, $88, $88, $88, $88, $00, $00, $00, $00

    ; left2
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $66, $77, $33, $22, $77, $33, $11, $33
    !byte $00, $cc, $ee, $cc, $cc, $cc, $88, $cc, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $77, $77, $ee, $dd, $33, $66, $77, $ee
    !byte $ee, $ee, $ff, $ff, $cc, $ee, $66, $ee, $00, $00, $00, $00, $00, $00, $00, $00

    ; left3
    !byte $11, $11, $00, $00, $11, $00, $00, $00, $88, $ff, $ff, $bb, $ff, $ff, $66, $ff
    !byte $00, $00, $88, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $11, $33, $77, $66, $11, $55, $77, $22, $ff, $ff, $ff, $ff, $ff, $bb, $00, $11
    !byte $88, $cc, $ee, $66, $00, $88, $cc, $cc, $00, $00, $00, $00, $00, $00, $00, $00
}
minerWillyEnd

    ; Small caps flowery "MANIC MINER (C)" graphic
titleStart
    !byte $00, $00, $00, $03, $04, $04, $04, $03, $07, $03, $06, $0c, $98, $30, $60, $c0
    !byte $8e, $9c, $bc, $ec, $cc, $0c, $0c, $1e, $00, $0e, $1b, $31, $31, $7f, $60, $f1
    !byte $00, $0e, $07, $87, $86, $c6, $c6, $ef, $00, $3d, $18, $98, $d8, $78, $38, $19
    !byte $00, $e1, $c3, $c6, $c6, $c6, $c3, $e1, $00, $f0, $18, $00, $00, $00, $18, $f0
    !byte $00, $01, $01, $00, $00, $00, $00, $00, $fe, $0f, $2d, $cc, $0c, $0c, $0c, $1e
    !byte $1e, $3c, $ec, $cc, $0c, $0c, $0c, $1e, $00, $f7, $63, $63, $63, $63, $63, $f7
    !byte $00, $1e, $8c, $cc, $6c, $3c, $1c, $8c, $00, $ff, $63, $68, $78, $68, $63, $ff
    !byte $00, $7f, $30, $30, $3f, $31, $30, $78, $00, $80, $c0, $c0, $80, $80, $c8, $70
    !byte $3c, $42, $99, $a1, $a1, $99, $42, $3c, $00, $00, $00, $00, $00, $00, $00, $00
titleEnd

    ; A Penrose triangle as encoded PLOT statements
trianglesLogo
    !byte $fe, $01                      ; GCOL 0,1
    !byte $04, $19, $a0                 ; MOVE  25, 160
    !byte $05, $7d, $75                 ; DRAW 125, 117 [could be a MOVE]
    !byte $55, $19, $ad                 ; TRI   25, 173
    !byte $55, $70, $87                 ; TRI  112, 135
    !byte $04, $7d, $75                 ; MOVE 125, 117
    !byte $05, $70, $87                 ; DRAW 112, 135 [could be a MOVE]
    !byte $55, $7d, $c6                 ; TRI  125, 198
    !byte $55, $70, $c0                 ; TRI  112, 192
    !byte $fe, $02                      ; GCOL 0,2
    !byte $04, $7d, $75                 ; MOVE 125, 117
    !byte $05, $89, $81                 ; DRAW 137, 129 [could be a MOVE]
    !byte $55, $7d, $c6                 ; TRI  125, 198
    !byte $55, $89, $d9                 ; TRI  137, 217
    !byte $04, $89, $d9                 ; MOVE 137, 217 [redundant]
    !byte $05, $7d, $c6                 ; DRAW 125, 198 [could be a MOVE]
    !byte $55, $38, $ad                 ; TRI   56, 173
    !byte $55, $44, $a7                 ; TRI   68, 167
    !byte $fe, $03                      ; GCOL 0,3
    !byte $04, $70, $bf                 ; MOVE 112, 191
    !byte $05, $70, $94                 ; DRAW 112, 148
    !byte $05, $44, $a7                 ; DRAW  68, 167
    !byte $05, $7d, $c6                 ; DRAW 125, 198
    !byte $05, $7d, $75                 ; DRAW 125, 117
    !byte $05, $19, $a0                 ; DRAW  25, 160
    !byte $05, $19, $ad                 ; DRAW  25, 173
    !byte $05, $7d, $e5                 ; DRAW 125, 229
    !byte $05, $89, $d9                 ; DRAW 137, 217
    !byte $05, $89, $81                 ; DRAW 137, 129
    !byte $05, $7d, $75                 ; DRAW 125, 117
    !byte $04, $89, $d9                 ; MOVE 137, 217
    !byte $05, $38, $ad                 ; DRAW  56, 173
    !byte $05, $70, $94                 ; DRAW 112, 148 [partly overdraws existing line]
    !byte $05, $70, $87                 ; DRAW 112, 135
    !byte $05, $19, $ad                 ; DRAW  25, 173
    !byte $ff                           ; TERMINATOR

    lda #$ff                            ; [UNUSED]
    sta willyIsOnGround                 ; [UNUSED]
    jmp $1ce8                           ; [UNUSED]

    !byte $00                           ; [UNUSED]

!pseudopc $2c98 {

getLevelDataByte
    lda $2a28                           ; [address is overwritten before use]
    rts                                 ;

level18Thing
    jsr drawFooterTextOrReturn          ;
    jmp afterLevel18Thing               ;

decodeSingleItemData
    lda #0                                  ;
    sta keyPositionCounter                  ;
    lda #>(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 2                ;
    lda currentLevel                        ;
    cmp #18                                 ;
    beq level18Thing                        ;
afterLevel18Thing
    lda #0                                  ;
    sta decodeLevelByte                     ;
    lda #<(levelSingleItemDefinitions - 1)  ;
    sta getLevelDataByte + 1                ;

skipToTerminator
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    cmp #$ff                            ; level separator
    beq +                               ;
    jmp skipToTerminator                ;
+
    inc decodeLevelByte                 ; increment level counter
    lda decodeLevelByte                 ;
    cmp currentLevel                    ;
    bne skipToTerminator                ; if (not current room) then branch back (find next level separator)

    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta singleItemType                  ;
    lda singleItemType                  ;
    and #$3f                            ;
    sta singleItemSpriteOffset          ; singleItemSpriteOffset = bottom 6 bits
    lda singleItemType                  ;
    and #$c0                            ;
    clc                                 ;
    rol                                 ;
    rol                                 ;
    rol                                 ;
    sta singleItemType                  ;
    inc singleItemType                  ; singleItemType = (top two bits / 64) + 1
    lda #$f0                            ;
    sta singleItemSprite                ; singleItemSprite = $f0
    jsr setSingleItemOffset5            ; singleItemOffsetX = 5
    ldx #0                              ;
    jmp decodeNextSingleItem            ;

    ; $2d00
drawExtraSpikes
    lda currentLevel                    ;
    cmp #8                              ; }
    beq drawSpecialSpikes               ; } special thinner spikes on
    cmp #12                             ; } the ceiling of levels 8 and 12
    beq drawSpecialSpikes               ; }
    ldx #0                              ; swap characters back
    jmp swapPagesC00andA00              ;

drawSpecialSpikes
    lda #17                             ; }
    jsr OSWRCH                          ; }
    lda #3                              ; } COLOUR 3
    jsr OSWRCH                          ; }

    lda #31                             ; }
    jsr OSWRCH                          ; }
    lda #6                              ; }
    jsr OSWRCH                          ; } TAB(6,1)
    lda #1                              ; }
    jsr OSWRCH                          ; }

    lda #$ec                            ; }
    jsr OSWRCH                          ; } VDU &EC (spike)

    lda #9                              ;
    ldx #0                              ; loop counter
-
    inx                                 ;
    jsr OSWRCH                          ; output seven forward spaces
    cpx #7                              ;
    bne -                               ;

    lda #$ec                            ; }
    jsr OSWRCH                          ; } VDU &EC (second spike)

    ldx #0                              ; swap characters back
    jmp swapPagesC00andA00              ;

; ***************************************************************************************
setSingleItemOffset15Command
    jsr setSingleItemOffset15           ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
setSingleItemOffset5Command
    jsr setSingleItemOffset5            ;
    lda singleItemSprite                ;
    sec                                 ;
    adc singleItemSpriteOffset          ;
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
toggleAlternativeSingleItemSprite
    jsr setSingleItemOffset5            ; X offset 5
    ldx #0                              ;
    jsr swapPagesC00andA00              ; swap pages
    lda #$eb                            ; regular single item character code
    sta singleItemSprite                ;
    jmp decodeNextSingleItem            ;

; ***************************************************************************************
decodeNextSingleItem
    jsr incrementLevelDataPointer       ;
    jsr getLevelDataByte                ;
    sta decodeLevelByte                 ;
    cmp #$ff                            ;
    beq drawExtraSpikes                 ; if (command 255) then branch (we are finished
                                        ; with this loop. Finally we draw the special
                                        ; spikes for level 8 and 12).
    cmp #$fe                            ;
    beq setSingleItemOffset15Command    ; if (command 254) then set X offset to 15
    cmp #$fd                            ;
    beq setSingleItemOffset5Command     ; if (command 253) then set X offset to 5

    dec singleItemType                  ;

    lda decodeLevelByte                 ;
    and #$f0                            ; top nybble contains the X position
    clc                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    ror                                 ;
    sta singleItemX                     ;
    lda decodeLevelByte                 ;
    and #$0f                            ; bottom nybble contains the Y position
    sta singleItemY                     ;

    lda #31                             ; TAB
    jsr OSWRCH                          ;

    lda singleItemX                     ;
    clc                                 ;
    adc singleItemOffsetX               ;
    jsr OSWRCH                          ; X pos

    lda singleItemY                     ;
    clc                                 ;
    adc #1                              ;
    jsr OSWRCH                          ; Y pos

    lda #17                             ;
    jsr OSWRCH                          ;
    lda #2                              ; COLOUR 2
    jsr OSWRCH                          ;

    lda singleItemSprite                ;
    cmp #$ee                            ;
    beq drawSpiderAndThread             ; if (spider) then branch
    cmp #$f0                            ;
    beq handleKey                       ; if (key) then branch
    cmp #$eb                            ;
    bne handleColour1SingleItem         ; if (colour 1 item) then branch
drawSingleItem
    lda singleItemSprite                    ;
    jsr OSWRCH                              ;
    lda singleItemType                      ;
    cmp #$ff                                ;
    beq toggleAlternativeSingleItemSprite   ;
    jmp decodeNextSingleItem                ;

; ***************************************************************************************
handleKey
    lda #17                         ;
    jsr OSWRCH                      ;
    lda #3                          ; COLOUR 3
    jsr OSWRCH                      ;
    jmp recordKey                   ;

; ***************************************************************************************
handleColour1SingleItem
    lda #17                         ;
    jsr OSWRCH                      ;
    lda #1                          ; COLOUR 1
    jsr OSWRCH                      ;
    jmp drawSingleItem              ;

; ***************************************************************************************
setSingleItemOffset15
    lda #$15                        ;
    sta singleItemOffsetX           ;
    rts                             ;

; ***************************************************************************************
setSingleItemOffset5
    lda #5                          ;
    sta singleItemOffsetX           ;
    rts                             ;

singleItemSprite
    !byte $ea                       ;
decodeLevelByte
    !byte $ea                       ;
singleItemX
    !byte $ea                       ;
singleItemY
    !byte $ea                       ;
singleItemOffsetX
    !byte $ea                       ;
singleItemType
    !byte $ea                       ;
singleItemSpriteOffset
    !byte $ea                       ;

; ***************************************************************************************
swapPagesC00andA00
    lda softCharacterDefinitions,x  ;
    tay                             ;
    lda $0a00,x                     ;
    sta softCharacterDefinitions,x  ;
    tya                             ;
    sta $0a00,x                     ;
    inx                             ;
    cpx #$ff                        ;
    bne swapPagesC00andA00          ;
    rts                             ;

    ; $2e18
; ***************************************************************************************
incrementLevelDataPointer
    lda getLevelDataByte + 1        ;
    clc                             ;
    adc #1                          ;
    sta getLevelDataByte + 1        ;
    lda getLevelDataByte + 2        ;
    adc #0                          ;
    sta getLevelDataByte + 2        ;
    rts

; ***************************************************************************************
drawSpiderAndThread
    jsr incrementLevelDataPointer   ;
    jsr getLevelDataByte            ;
    sta decodeLevelByte             ;

    ; draw line of vertical thread
    ldx #0                          ; loop counter
threadLoop
    cpx decodeLevelByte             ;
    beq drawSpider                  ; if (length of thread reached) then branch

    lda #$f5                        ; draw vertical thread
    jsr OSWRCH                      ;
    lda #$0a                        ; move down one character
    jsr OSWRCH                      ;
    lda #$08                        ;
    jsr OSWRCH                      ; and back one character
    inx                             ;
    jmp threadLoop                  ;

; ***************************************************************************************
drawSpider
    lda #$ee                        ; spider at end of thread
    jsr OSWRCH                      ;
    jmp decodeNextSingleItem        ;

; ***************************************************************************************
recordKey
    lda keyPositionCounter          ;
    cmp #keyPositionsEnd - keyPositions ; only store five keys (don't go beyond the end of the buffer)
    bcc +                           ;
    jmp drawSingleItem              ;

+
    lda singleItemX                 ;
    clc                             ;
    adc singleItemOffsetX           ;
    ldy keyPositionCounter          ;
    sta keyPositions,y              ; store key position x
    iny                             ;
    lda singleItemY                 ;
    clc                             ;
    adc #1                          ;
    sta keyPositions,y              ; store key position y
    inc keyPositionCounter          ;
    inc keyPositionCounter          ;
    jmp drawSingleItem              ;

keyPositions
    !byte $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ea
keyPositionsEnd
keyPositionCounter
    !byte $0f                       ;
tempKeyIndex
    !byte $16                       ;
keyColourCounter
    !byte $ea                       ;

; ***************************************************************************************
colourCycleKeys
    lda #0                          ;
    tax                             ;
cycleKeyLoop
    inc keyColourCounter            ;
    lda #31                         ;
    jsr OSWRCH                      ;
    lda keyPositions,x              ;
    jsr OSWRCH                      ;
    inx                             ;
    lda keyPositions,x              ;
    jsr OSWRCH                      ;
    inx                             ;
    stx tempKeyIndex                ;

    lda #135                        ;
    jsr OSBYTE                      ; read character from screen

    cpx #$90                        ;
    beq animateKey                  ; if (key present) then branch (animate key)
L2eb1
    ldx tempKeyIndex                ;
    txa                             ;
    cmp keyPositionCounter          ;
    bcs L2ecd                       ;
    lda keyPositionCounter          ;
    lsr                             ;
    and #1                          ;
    cmp #0                          ;
    beq +                           ;
    jmp cycleKeyLoop                ;

+
    inc keyColourCounter            ;
    jmp cycleKeyLoop                ;

L2ecd
    rts                             ;

animateKey
    lda #17                         ;
    jsr OSWRCH                      ; COLOUR
    lda keyColourCounter            ;
    and #3                          ;
    cmp #0                          ;
    beq handleColour0               ; COLOUR 1,2,3
setKeyColour
    jsr OSWRCH                      ;
    lda #$90                        ; draw key
    jsr OSWRCH                      ;
    jmp L2eb1                       ;

handleColour0
    lda #3                          ; COLOUR 3
    jmp setKeyColour                ;

readRoomNameCharacter
    lda $ffff,x                     ;
    rts                             ;

drawRoomName
    lda #<numbers                   ;
    sta readRoomNameCharacter + 1   ;
    lda #>numbers                   ;
    sta readRoomNameCharacter + 2   ;
    lda #0                          ;
    sta roomNumberReached           ;
    lda #31                         ;
    jsr OSWRCH                      ;
    lda #4                          ; TAB(4,17)
    jsr OSWRCH                      ;
    lda #17                         ;
    jsr OSWRCH                      ;

    ; print 32 spaces
    lda #charSPACE                  ;
    ldx #0                          ;
-
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$20                        ;
    bne -                           ;

    lda #17                         ;
    jsr OSWRCH                      ;
    lda #3                          ; COLOUR 3
    jsr OSWRCH                      ;

    ; scan for next control character
    ldx #0                          ; loop counter
scanForControl
    jsr readRoomNameCharacter       ;
    cmp #charSPACE                  ;
    bcc foundControlCharacter       ;
-
    inx                             ;
    cpx #0                          ;
    bne scanForControl              ;
    inc readRoomNameCharacter + 2   ;
    jmp scanForControl              ;

foundControlCharacter
    inc roomNumberReached           ; }
    lda currentLevel                ; }
    cmp roomNumberReached           ; }
    bne -                           ; } if (room not reached) then branch back

    ; tab to correct position
    lda #31                         ;
    jsr OSWRCH                      ;
    jsr readRoomNameCharacter       ; TAB(31, 4+char, 17)
    clc                             ;
    adc #4                          ;
    jsr OSWRCH                      ;
    lda #17                         ;
    jsr OSWRCH                      ;

    ; print room title
-
    inx                             ;
    jsr readRoomNameCharacter       ; read next character
    cmp #charSPACE                  ;
    bcc +                           ; if (control character) then branch
    jsr OSWRCH                      ;
    jmp -

    ; EOR each byte with $ff in the range $5ac0-$5cc0 (inverting the room title)
+
    lda #$00                        ;
    sta readOrWriteAddrLow          ;
    lda #$5a                        ; store $5a00 as screen address to read / write to
    sta readOrWriteAddrHigh         ;
    ldy #$c0                        ;
eorLoop
    lda #$b9                        ; } set to read a byte (store $B9 = opcode for LDA abs,Y)
    sta readOrWriteByte             ; }
    jsr readOrWriteByte             ; read byte
    eor #$ff                        ; eor with 255
    tax                             ; remember A
    lda #$99                        ; } set to write a byte (store $99 = opcode for STA abs,Y)
    sta readOrWriteByte             ; }
    txa                             ; recall A
    jsr readOrWriteByte             ; write byte
    iny                             ;
    cpy #$c0                        ;
    beq +                           ;
    cpy #0                          ;
    bne eorLoop                     ; if (not done) then loop back
    inc readOrWriteAddrHigh         ;
    jmp eorLoop                     ;

+
    lda readOrWriteAddrHigh         ;
    cmp #$5c                        ;
    bne eorLoop                     ;

    lda #$47                        ;
    sta $8e                         ;
    lda #$58                        ; ($8e,$8f) = $5847 (on screen)
    sta $8f                         ;

    ; write to floor
    ldy #0                          ;
    ldx #2                          ;
writeToScreenLoop
    lda #$ff                        ;
    sta ($8e),y                     ;
    lda #0                          ;
    dey                             ;
    sta ($8e),y                     ;
    tya                             ;
    clc                             ;
    adc #9                          ;
    tay                             ;
    cpy #0                          ;
    bne writeToScreenLoop           ;
    inc $8f                         ;
    dex                             ;
    bne writeToScreenLoop           ;

    lda #0                          ;
    sta $5846                       ; screen address
    rts                             ;

copySpikeSprites
    ldx #0                          ; loop counter
-
    lda spikePlant,x                ;
    sta $0cd8,x                     ; copy spike plant sprite to $0cd8
    inx                             ;
    cpx #8                          ;
    bne -                           ;

    lda singleItemSpriteOffset      ;
    asl                             ;
    asl                             ;
    asl                             ;
    tax                             ;

    ldy #0                          ; loop counter
-
    lda allOtherSpikes,x            ;
    sta $0ce0,y                     ; copy spike from allOtherSpikes+(8*singleItemSpriteOffset) to $0ce0
    inx                             ;
    iny                             ;
    cpy #8                          ;
    bne -                           ;

    lda keyPositionCounter          ;
    cmp #4                          ;
    beq +                           ;
    lsr                             ;
    sta keysLeft                    ;
    rts                             ;

+
    lda #1                          ;
    sta keysLeft                    ;
    rts                             ;

    !byte $ea                       ; [UNUSED]
readOrWriteByte
readOrWriteAddrLow = readOrWriteByte + 1
readOrWriteAddrHigh = readOrWriteByte + 2
    lda $ffff,x                     ;
    rts                             ;

    ; [UNUSED]
    !byte $00, $46, $58, $00, $00
    !byte $0d, $00, $0a, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00
}

initialize
    ; install event vector code at $3000
    lda #<mainEventRoutine          ;
    sta vectorEVNTV                 ;
    lda #>mainEventRoutine          ;
    sta vectorEVNTV + 1             ;

    ; initialize zero page variables $00-$9f from zeroPageDefaults - zeroPageDefaults + $9f
    ldx #0                          ;
-
    lda zeroPageDefaults,x          ;
    sta $00,x                       ;
    inx                             ;
    cpx #zeroPageDefaultsEnd - zeroPageDefaults ;
    bne -                           ;

    ; copy ($5900-$59ff) to ($0500-$05ff) (start of miner willy graphics)
    ldx #0                          ; loop counter
-
    lda minerWilly,x                ;
    sta $0500,x                     ;
    inx                             ;
    bne -                           ;

    ; copy ($5a00-$5aff) to ($0600-$06ff) (end of miner willy graphics)
    ldx #0                          ; loop counter
-
    lda minerWilly + $0100,x        ;
    sta $0600,x                     ;
    inx                             ;
    bne -                           ;

    ; copy ($5b00-$5bff) to ($0700-$07ff) (flowery title graphics)
    ldx #0                          ; loop counter
-
    lda titleStart,x                ;
    sta $0700,x                     ;
    inx                             ;
    bne -                           ;

    ; EOR sprite memory ($0900-$0cff) with #$aa (for obfuscation)
    lda #$00                        ; }
    sta $70                         ; } address $0900
    lda #$09                        ; }
    sta $71                         ; }
    ldx #4                          ;
    ldy #0                          ;
-
    lda ($70),y                     ;
    eor #$aa                        ;
    sta ($70),y                     ;
    iny                             ;
    bne -                           ;
    inc $71                         ;
    dex                             ;
    bne -                           ;

    ; EOR with $55 memory in the region ($0f00-$2cff)
    lda #$00                        ; }
    sta $70                         ; }
    lda #$0f                        ; } address $0f00
    sta $71                         ; }
    ldx #$1e                        ;
    ldy #0                          ;
-
    lda ($70),y                     ;
    eor #$55                        ;
    sta ($70),y                     ;
    iny                             ;
    bne -                           ;
    inc $71                         ;
    dex                             ;
    bne -                           ;

    ; copy ($5c00-$5cff) to ($2c98-$2d97)
    ldx #0                          ; loop counter
-
    lda $5c00,x                     ;
    sta $2c98,x                     ;
    inx                             ;
    bne -                           ;

    ; copy ($5d00-$5dff) to ($2d98-$2e97)
    ldx #0                          ; loop counter
-
    lda $5d00,x                     ;
    sta $2d98,x                     ;
    inx                             ;
    bne -                           ;

    ; copy ($5e00-$5eff) to ($2e98-$2f97)
    ldx #0                          ; loop counter
-
    lda $5e00,x                     ;
    sta $2e98,x                     ;
    inx                             ;
    bne -                           ;

    ; copy ($5f00-$5f66) to ($2f98-$2ffe)
    ldx #0                          ; loop counter
-
    lda $5f00,x                     ;
    sta $2f98,x                     ;
    inx                             ;
    cpx #$67                        ;
    bne -                           ;

    ; install a JMP zeroScore instruction   (just for obfuscation)
    lda #$4c                        ;
    sta zeroScoreJumper             ;
    lda #<zeroScore                 ;
    sta zeroScoreJumper + 1         ;
    lda #>zeroScore                 ;
    sta zeroScoreJumper + 2         ;

    ; EOR with #$55 memory in the region ($6200-$7fff)
    lda #$00                        ; }
    sta $70                         ; }
    lda #$62                        ; } $6200
    sta $71                         ; }
    ldx #$1e                        ;
    ldy #0                          ;
-
    lda ($70),y                     ;
    eor #$55                        ;
    sta ($70),y                     ;
    iny                             ;
    bne -                           ;
    inc $71                         ;
    dex                             ;
    bne -                           ;

    ; print VDU stream
    ldx #0                          ;
-
    lda vduStream,x                 ;
    cmp #$ff                        ;
    beq output8Zeros                ;
    jsr OSWRCH                      ;
backFrom8Zeros
    inx                             ;
    cpx #vduStreamEnd - vduStream   ;
    bne -                           ;

    ; *FX 14,4 enable vsync event
    lda #14                         ;
    ldx #4                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    ; *FX 200,3 clear memory on break
    lda #200                        ;
    ldx #3                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    ; *FX 229,1 - ESCAPE generates ASCII code
    lda #229                        ;
    ldx #1                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    ; fix up single item
    lda #$41                        ;
    sta pokeSingleItem              ;

    ; VDU 26 - reset text and graphics windows
    lda #26                         ;
    jsr OSWRCH                      ;
    jmp moveAndPrintSpaces          ;

; ***************************************************************************************
output8Zeros
    ldy #8                          ;
    lda #0                          ;
zerosLoop
    jsr OSWRCH                      ;
    dey                             ;
    bne zerosLoop                   ;
    jmp backFrom8Zeros              ;

; ***************************************************************************************
vduStream
    !byte $17, $00, $07, $1e, $ff   ; VDU 23,0,7,30,0;0;0;0;   vertical sync position = 30
    !byte $17, $01, $00, $00, $ff   ; VDU 23,0,1, 0,0;0;0;0;   horizontal displayed = 0
vduStreamEnd

    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; [UNUSED]

addition
    !byte $ea                   ;

counter
    !byte $ea                   ;

    !byte $ea, $ea, $ea, $ea    ; [UNUSED]

keyArray
    !byte $cf, $ce, $ee, $ed    ; number keys 1, 2, 3, 4

entryCode
    !byte $ea, $ea, $ea, $ea    ; entry code [UNUSED]

waitForRETURN
    ldy #$ff                    ;
    ldx #$b6                    ; -74 = RETURN
    lda #129                    ;
    jsr OSBYTE                  ;
    cpy #$ff                    ;
    beq waitForRETURN           ;
    rts                         ;

positionShift
    !byte 4, 31, 24, 12         ; VDU 4:TAB(24,12)
positionShiftEnd
    !byte $5e, 5                ; PRINT UP ARROW:VDU 5
positionShiftExtendedEnd

numberOfCodeEntryAttempts
    !byte $ea
setPaletteMessage
    !byte $13, $03, $03, $00    ;
setPaletteMessageEnd

    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00   ; [UNUSED]

    ; points into some obfuscated code, for no good reason, all just part of the obfuscation
otherData = $627F

continue
    ldy #0                          ;
-
    ldx entryCode,y                 ; X = #$EA
    lda otherData-$ea,x             ; A = #$AA
    sta entryCode,y                 ; store
    iny                             ;
    cpy #4                          ;
    bne -                           ;

    lda entryCode + 3               ; #$AA
    clc                             ;
    ror                             ;
    ror                             ;
    ror                             ;
    sta entryCodeData               ; store $95

    lda entryCode + 2               ; #$AA
    asl                             ;
    asl                             ;
    asl                             ;
    asl                             ;
    clc                             ;
    adc entryCodeData               ;
    sta entryCodeData               ; store #$35

    lda entryCode + 1               ; #$AA
    asl                             ;
    asl                             ;
    clc                             ;
    adc entryCodeData               ;
    clc                             ;
    adc entryCode                   ;
    sta entryCodeData               ; store #$87

    ; Calculation of value of $70,$71 in a loop
    lda #$80                        ;
    sta $70                         ;
    lda #$19                        ; $70,$71 = $1980
    sta $71                         ;
    dec counter                     ;
add18loop
    lda counter                     ;
    cmp #$ff                        ;
    beq +                           ;

    lda $70                         ; }
    clc                             ; }
    adc #$12                        ; }
    sta $70                         ; } $70,$71 += 18
    lda $71                         ; }
    adc #0                          ; }
    sta $71                         ; }

    dec counter                     ;
    jmp add18loop                   ; jump back

+
    lda $70                         ; }
    clc                             ; }
    adc addition                    ; }
    sta $70                         ; } $70,$71 += addition ($ea)
    lda $71                         ; }
    adc #0                          ; }
    sta $71                         ; }
    ldy #0                          ;
    lda ($70),y                     ; read from ($70,$71) i.e. memory location $2ADE value is $24
    jmp codeEnteredCorrectly        ; jump straight to success [hack?]

checkResultOfCodeEntry
    beq codeEnteredCorrectly        ;
    lda #7                          ;
    jsr OSWRCH                      ; VDU 7 - beep to indicate failure
    dec numberOfCodeEntryAttempts   ;
    lda numberOfCodeEntryAttempts   ;
    cmp #0                          ;
    bne tryCodeEntryAgain           ;

    ; turn off the display
    ldx #0                          ;
-
    lda turnOffDisplayMessage,x     ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #turnOffDisplayMessageEnd - turnOffDisplayMessage   ;
    bne -                           ;

    ; lock up!
-
    jsr OSWRCH                      ; lock up outputting an infinite stream of VDU 0's
    jmp -                           ;

tryCodeEntryAgain
    jsr showEnterCodeAtCell         ;
    lda #18                         ; }
    jsr OSWRCH                      ; }
    lda #$00                        ; }
    jsr OSWRCH                      ; } VDU 18,0,3    = GCOL 0,3
    lda #$03                        ; }
    jsr OSWRCH                      ; }

    ; move back
    ldx #0                          ;
-
    lda positionShift,x             ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #positionShiftEnd - positionShift   ;
    bne -                           ;

    ; display seven spaces
    lda #charSPACE                  ;
    ldx #7                          ;
-
    jsr OSWRCH                      ;
    dex                             ;
    bne -                           ;
    jmp showBoxes                   ;

codeEnteredCorrectly
    jmp initialize                  ;

    !byte $02, $00, $01, $03        ; [UNUSED]

entryCodeData
    !byte $ea                       ;

; ***************************************************************************************
miner4EntryPoint
    ; *FX 13,4 (disable vsync event)
    lda #13                         ;
    ldx #4                          ;
    ldy #0                          ;
    jsr OSBYTE                      ;

    jmp startUp                     ;

; ***************************************************************************************
turnOffDisplayMessage
    !byte 19, 0, 0, 0, 0, 0                 ; palette logical colour zero is black
    !byte 23, 0, 6, 0, 0, 0, 0, 0, 0        ; show zero rows
turnOffDisplayMessageEnd

    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; [UNUSED]

enterCodeAtCell
    !byte $1f, $09, $08                     ; TAB(9,8)
    !text "ENTER CODE AT CELL "             ;
enterCodeAtCellEnd

codeMessage
    !byte $1f, $12, $0b                     ; TAB(18,11)
    !text "Code"                            ;
    !text $05, $19, $04, $20, $01, $bc, $02 ;
codeMessageEnd

pressReturnToStopMessage
    !byte $1f, $08, $0a                     ; TAB(8,10)
    !text "PRESS  'RETURN'  TO STOP"        ;
pressReturnToStopMessageEnd

    !byte 13                                ; [UNUSED]

    ; $6200
!xor $55 {

startGame
    lda #1                                  ; set level 1
    jsr showLevel                           ;
    jsr updateMusicState                    ;
playCurrentLevel
    lda tempScreenAddressLow                ;
    sta $75                                 ;
    lda tempScreenAddressHigh               ;
    sta $76                                 ;

    jsr updatePlayer                        ;

    lda $75                                 ;
    sta tempScreenAddressLow                ;
    lda $76                                 ;
    sta tempScreenAddressHigh               ;

    jsr animateKeysAndUpdateGuardians       ;
    jsr collideWithGuardians                ;
    jsr updateJumpAndFallSounds             ;

    ; pointless delay loop
    ldx #0                                  ; 0
    ldy #$ff                                ; 255
-
    inx                                     ;
    bne -                                   ;
    iny                                     ;
    bne -                                   ;

    ldy #$ff                                ;
    ldx #$a6                                ; DELETE
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq freezeGame                          ;

    ldy #$ff                                ;
    ldx #$8f                                ; ESCAPE
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq endGame                             ;

    ldy #$ff                                ;
    ldx #$ae                                ; S
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq musicOn                             ;

    ldy #$ff                                ;
    ldx #$ef                                ; Q
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq musicOff                            ;

checkForFunctionKeys
    lda cheatModeEnabled                    ;
    cmp #0                                  ;
    beq +                                   ;

    ; read function keys
    lda #0                                  ;
    sta keyCounter                          ; zero loop counter
readKeysLoop
    ldy #$ff                                ;
    ldx keyCounter                          ;
    lda keysToRead,x                        ; get key to read
    tax                                     ;
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq functionKeyPressed                  ; if (function key pressed) then branch

    inc keyCounter                          ; increment counter
    lda keyCounter                          ;
    cmp #keysToReadEnd - keysToRead         ;
    bne readKeysLoop                        ;
+
    jmp playCurrentLevel                    ;

freezeGame
    jsr pauseMusic                          ;
waitForCOPYKey
    jsr checkCheatCode                      ;

    ldy #$ff                                ;
    ldx #$96                                ; COPY
    lda #$81                                ;
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    bne waitForCOPYKey                      ;

    jsr updateMusicState                    ;
    jmp playCurrentLevel                    ;

endGame
    jmp zeroScoreJumper                     ;

musicOff
    lda #0                                  ;
    sta musicEnabled                        ;
    jsr pauseMusic                          ;
    jmp checkForFunctionKeys                ;

musicOn
    lda #1                                  ;
    sta musicEnabled                        ;
    jsr resumeMusic                         ;
    jmp checkForFunctionKeys                ;

showLevel
    jsr storeLevelNumber                    ; store level number
    lda #5                                  ;
    sta keysLeft                            ;

    lda #17                                 ; }
    jsr OSWRCH                              ; } COLOUR 2
    lda #2                                  ; }
    jsr OSWRCH                              ; }

    lda currentLevel                        ;
    jsr initLevel                           ;
    jsr copyGuardianSprites                 ;
    jsr resetLevel19Meteors                 ;
    jmp L6391                               ;

resumeMusic
    lda #$ee                                ; opcode for 'INC abs'
    sta checkForChannel3Update              ; store INC opcode in the code that updates music
    rts                                     ;

pauseMusic
    lda #$60                                ; opcode for 'RTS'
    sta checkForChannel3Update              ; store RTS opcode in the code that updates music
    lda #$9f                                ;
    jmp soundDirect                         ; silence sound channel 3

musicEnabled
    !byte $ea                               ;

updateMusicState
    lda #0                                  ;
    sta channel3Frequency                   ;
    lda musicEnabled                        ;
    cmp #0                                  ;
    beq pauseMusic                          ;
    jmp resumeMusic                         ;

functionKeyPressed
    ldy #$ff                                ;
    ldx #$ff                                ;
    lda #$81                                ; check for SHIFT key press
    jsr OSBYTE                              ;
    cpy #$ff                                ;
    beq shiftPressed                        ;

afterShiftHandled
    lda keyCounter                          ;
    cmp zeroBasedLevel                      ;
    beq +                                   ;
    sta zeroBasedLevel                      ;
    clc                                     ;
    adc #1                                  ;
    jsr showLevel                           ; change level
    jmp playCurrentLevel                    ; [redundant]

+
    jmp playCurrentLevel                    ;

shiftPressed
    lda keyCounter                          ;
    clc                                     ;
    adc #$0a                                ;
    sta keyCounter                          ; add 10 to the key counter
    jmp afterShiftHandled                   ;

; ***************************************************************************************
;
; On Entry:
;   A = current level (1 based)
;
; ***************************************************************************************
storeLevelNumber
    sta currentLevel                    ;
    sta zeroBasedLevel                  ;
    dec zeroBasedLevel                  ; make the level zero based

    lda cheatModeEnabled                ;
    cmp #0                              ;
    beq .return1                        ;

    lda currentLevel                    ;
    cmp #19                             ;
    bcc .return1                        ; if (current level < 19)
    lda #1                              ; set level 1
    sta currentLevel                    ;
    lda #0                              ; zero based level number is zero
    nop                                 ;
    nop                                 ;
    nop                                 ;
.return1
    rts                                 ;

keysToRead
    ;      f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,  f8,  f9
    !byte $df, $8e, $8d, $8c, $eb, $8b, $8a, $e9, $89, $88
keysToReadEnd
keyCounter
    !byte $ea                           ;
zeroBasedLevel
    !byte $ea                           ;

    ldx #0                              ;
    ldy #10                             ; copy ten pages
copyTenPagesLoop
    lda $4000,x                         ; copy $4000-$4a00 to $0f00-$0900
copyTenPagesStoreAddressHigh = * + 2
    sta $0f00,x                         ;
    inx                                 ;
    bne copyTenPagesLoop                ;
    inc copyTenPagesLoop + 2            ;
    inc copyTenPagesStoreAddressHigh    ;
    dey                                 ;
    bne copyTenPagesLoop                ;

    ldx #0                          ; loop counter
-
    lda $4a00,x                     ;
    sta $1900,x                     ;
    inx                             ;
    cpx #$80                        ;
    bne -                           ;

    ldx #0                          ; loop counter
-
    lda $5000,x                     ;
    sta $0d40,x                     ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;
    jmp zeroScoreJumper             ;

L6391
    ldx #0                          ;
-
    lda softCharacterDefinitions,x  ;
    sta $0cd0,x                     ;       copy eight bytes from $0c00 to $0cd0
    lda $0c78,x                     ;
    sta $0cb8,x                     ;       copy eight bytes from $0c78 to $0cb8
    lda $0c08,x                     ;
    sta $0ce8,x                     ;       copy eight bytes from $0c09 to $0ce8
    inx                             ;
    cpx #8                          ;
    bne -                           ;

    lda #0                          ;
    sta $0cd6                       ;
    sta $0cbe                       ;
    sta $0cee                       ;

    lda #$ff                        ;
    sta $0cd7                       ;
    sta $0cbf                       ;
    sta $0cef                       ;

    lda $70                         ; }
    sta exitPositionX               ; }
    lda $71                         ; } set exit position
    sta exitPositionY               ; }

    lda #$4c                        ; }
    sta doWeMoveEugene              ; } store opcode for 'JMP abs'

    lda #$f0                        ;
    sta eugeneColourMask            ;

    lda #16                         ;
    sta kongYCoordinate             ;

    lda #$a9                        ; opcode for 'LDA #'
    sta drawKong                    ;

    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    sta isInAir                     ;

    lda #$27                        ;
    sta willySpriteAddressLow       ;

    lda #willyPageLeft              ; }
    sta willyGraphicsPage           ; } look left

    ; set player start position
    ldx currentLevel                ;
    lda playerStartPositions - 1,x  ;
    tax                             ;
    and #$f0                        ;
    lsr                             ;
    clc                             ;
    adc #$17                        ;
    sta playerPixelX                ; playerPixelX = 23 + (top nybble * 8)
    sta newPlayerPixelX             ;
    txa                             ;
    and #$0f                        ;
    asl                             ;
    asl                             ;
    asl                             ;
    sta playerPixelY                ; playerPixelY = (lower nybble * 8)
    sta newPlayerPixelY             ;
    sta willyHighestPointReachedOnCurrentJump ;

    ldx playerPixelX                ; if (start X < 64) then look right at start
    cpx #64                         ;
    bcc lookRight                   ;
    lda #3                          ; look left
afterLooking
    sta willyAnimationEOR           ;
    ldy playerPixelY                ;
    lda #1                          ;
    jsr readOrWriteCachedBackground ;
    lda willyGraphicsPage           ;
    sta willySpriteAddressHigh      ;

    lda conveyorX                   ;
    and #$80                        ;
    cmp #$80                        ;
    beq +                           ;

    lda #$ff                        ;
    sta conveyorDirection           ;
    jmp copySpikeSprites            ;

+
    lda #1                          ;
    sta conveyorDirection           ;
    jmp copySpikeSprites            ;

lookRight
    lda #$e7                        ;
    sta willySpriteAddressLow       ;
    lda #willyPageRight             ; }
    sta willyGraphicsPage           ; } look right
    lda #0                          ; }
    jmp afterLooking                ; }

; ***************************************************************************************
gotoNextLevel
    lda cheatModeEnabled            ;
    cmp #1                          ;
    beq +                           ; if (cheat mode enabled) then branch (reset same level)
    lda currentLevel                ;
    cmp #20                         ;
    beq startGameJumper             ; if (current level is the last) then branch (start a new game)
    inc currentLevel                ;
+
    lda currentLevel                ;
    jsr showLevel                   ;
    jmp playCurrentLevel            ;

startGameJumper
    jmp startGame                   ;

updateAirAndCheckExit
    jsr updateAir                   ;
    lda keysLeft                    ;
    cmp #0                          ;
    beq checkExit                   ;
    rts                             ;

checkExit
    lda #31                         ; TAB(34, 23)
    jsr OSWRCH                      ;
    lda #$22                        ;
    jsr OSWRCH                      ;
    lda #$17                        ;
    jsr OSWRCH                      ;

    jsr readTwoCharactersFromScreen ;
    lda currentLevel                ;
    cmp #5                          ;
    bne +                           ;

    ; level 5 specific code
    lda eugenePositionY             ;
    ora #$80                        ; set top bit (ensure moving down)
    sta eugenePositionY             ;

    lda #$60                        ; store opcode for 'RTS'
    sta doWeMoveEugene              ;

    jsr toggleEugeneColour          ;
+
    lda newPlayerPixelX             ;
    lsr                             ;
    lsr                             ;
    cmp exitPositionX               ;
    bne L64be                       ;
    lda newPlayerPixelY             ;
    sec                             ;
    sbc #0                          ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #2                          ;
    cmp exitPositionY               ;
    bne L64be                       ;
    jmp L651f                       ;

L64be
    lda currentLevel                ;
    cmp #6                          ;
    bne updateFlashingExit          ;

    ; special code to handle level 6 flashing exit
    lda playerPixelX                ;
    cmp #$82                        ;
    bne updateFlashingExit          ;

    lda playerPixelY                ;
    cmp #13                         ;
    bne updateFlashingExit          ;
    jmp L651f                       ;

updateFlashingExit
    inc flashingExitCounter         ;
    lda flashingExitCounter         ;
    and #3                          ;
    cmp #0                          ;
    beq L64e2                       ;
    rts                             ;

L64e2
    lda #17                         ;
    jsr OSWRCH                      ; VDU 17 (COLOUR)
    lda flashingExitCounter         ;
    and #4                          ;
    cmp #4                          ;
    beq setColour3AndShowExit       ;
    lda #2                          ; COLOUR 2
setColourAndShowExit
    jsr OSWRCH                      ;

    lda #31                         ;
    jsr OSWRCH                      ; VDU 31 (TAB)
    lda exitPositionX               ;
    jsr OSWRCH                      ;
    lda exitPositionY               ;
    sec                             ;
    sbc #2                          ;
    jsr OSWRCH                      ;

    ; print 2x2 block of characters for the flashing exit:
    ;   VDU $91, $92
    ;   VDU $93, $94
    ldx #0                          ;
-
    lda flashingExit,x              ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #flashingExitEnd - flashingExit ;
    bne -                           ;
    rts                             ;

flashingExitCounter
    !byte $ea                       ;

setColour3AndShowExit
    lda #3                          ; COLOUR 3
    jmp setColourAndShowExit        ;

    ; $651d
tempScreenAddressLow
    !byte $00                       ;
tempScreenAddressHigh
    !byte $05                       ;

; ***************************************************************************************
L651f
    lda #$4c                        ;
    sta opcodeForJsrPlot            ; set opcode 'JMP abs'
    jsr updatePlayerWithAnimation   ;
    lda #$20                        ;
    sta opcodeForJsrPlot            ; restore opcode for 'JSR abs'
    jsr pauseMusic                  ;
    lda #0                          ;
    sta keyCounter                  ;
L6534
    lda airRemaining                ;
    lsr                             ;
    clc                             ;
    adc #1                          ;
    eor #$3f                        ;
    sta channel2Frequency           ;
    jsr updateAir                   ;
    inc keyCounter                  ;
    lda keyCounter                  ;
    and #3                          ;
    cmp #0                          ;
    beq L655c                       ;
L654f
    lda airRemaining                ;
    cmp #0                          ;
    bne L6534                       ;
    jsr updateMusicState            ;
    jmp gotoNextLevel               ;

L655c
    lda #5                          ;
    jsr addToScore                  ; add 6 to score?
    jmp L654f                       ;

flashingExit
    !byte $91, $92, $0a, $08, $08, $93, $94
flashingExitEnd

airMessage
    !byte $11, 2                    ; COLOUR 2
    !byte $1f, 2, 15                ; TAB(2,15)
    !byte 'A', 10, 8                ; VDU $41, down, left
    !byte 'I', 10, 8                ; VDU $49, down, left
    !byte 'R'                       ; VDU $52
airMessageEnd

drawInitialAirMeter
    lda #$67                        ;
    sta airRemaining                ; ?

    lda #17                         ; }
    jsr OSWRCH                      ; }
    lda #3                          ; } COLOUR 3
    jsr OSWRCH                      ; }

    jsr showScoreAndResetVerticalGuardians  ;
    jsr decodeSingleItemData                ;

    ; show 'AIR' message
    ldx #0                          ; loop counter
-
    lda airMessage,x                ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #airMessageEnd - airMessage ;
    bne -                           ;

    ; draw AIR meter on screen
    lda #$32                        ; }
    sta storeByte + 2               ; }
    lda #$a0                        ; } screen address = $32a0
    sta storeByte + 1               ; }

    ldy #$0a                        ; loop counter
drawAirRow
    ldx #0                          ; loop counter
    lda #$f3                        ; value to store
-
    jsr storeByte                   ;
    inx                             ;
    cpx #8                          ;
    beq switchValueToStore          ;
backToLoop
    cpx #16                         ;
    bne -                           ;
    jsr gotoNextRow                 ;
    dey                             ;
    bne drawAirRow                  ;

    ; draw bottom of AIR meter
    ldy #3                          ;
drawAirRow2
    ldx #0                          ;
    lda #$3f                        ;
-
    jsr storeByte                   ;
    inx                             ;
    cpx #8                          ;
    beq changeValueToStore2         ;
backToAirLoop2
    cpx #16                         ;
    bne -                           ;
    jsr gotoNextRow                 ;
    dey                             ;
    bne drawAirRow2                 ;

    ldy #4                          ;
drawAirRow3
    ldx #0                          ;
drawAir
    lda #$bd                        ; }
    sta storeByte                   ; } change op code to LDA abs,x
    jsr storeByte                   ; load byte
    sta tempScreenByte              ; remember original byte
    lda #$9d                        ; }
    sta storeByte                   ; } change op code to STA abs,x

    lda tempScreenByte              ; recall original byte
    ora #$0f                        ; add colour
    jsr storeByte                   ; store byte
    inx                             ;
    cpx #16                         ; 16 bytes
    bne drawAir                     ;
    jsr gotoNextRow                 ;
    dey                             ;
    bne drawAirRow3                 ;

    lda #0                          ;
    sta airRemainingOffsetWithinCell;

    lda #$f0                        ; draw the very top pixel row of the air bar
    sta $32a0                       ; screen address
    sta $32a8                       ; screen address

    lda #$32                        ;
    sta storeByte + 2               ;
    lda #$a0                        ; set screen address back to $32a0
    sta storeByte + 1               ;
    rts                             ;

switchValueToStore
    lda #$fc                        ;
    jmp backToLoop                  ;

changeValueToStore2
    lda #$cf                        ;
    jmp backToAirLoop2              ;

storeByte
    sta $ffff,x                     ;
    rts                             ;

gotoNextRow
    lda storeByte + 1               ;
    clc                             ;
    adc #$80                        ;
    sta storeByte + 1               ;
    lda storeByte + 2               ;
    adc #2                          ;
    sta storeByte + 2               ;
    rts                             ;

tempScreenByte
    !byte $ea                       ;

kongTriggered
    jsr updateKongFalling           ;
    jmp loseAirCheck                ;

updateAir
    lda kongBeastSwitchTriggered    ;
    cmp #1                          ;
    beq kongTriggered               ;
loseAirCheck
    inc airRemainingDelayCounter    ;
    lda airRemainingDelayCounter    ;
    and #$0f                        ;
    cmp #0                          ;
    beq loseAir                     ;
    rts                             ;

loseAir
    dec airRemaining                    ;
    inc airRemainingOffsetWithinCell    ;
    lda airRemainingOffsetWithinCell    ;
    and #7                              ;
    cmp #0                              ;
    beq airAtEndOfCell                  ;

readAirByte
    lda #$bd                            ; opcode for 'LDA abs, x'
    sta storeByte                       ;
    ldx airRemainingOffsetWithinCell    ;
    jsr storeByte                       ;
    cmp #$f3                            ;
    bne setByteToWrite                  ;
    lda #$f0                            ;

writeTwoBytesToScreenForAir
    ldy #$9d                            ; opcode for 'STA abs, x'
    sty storeByte                       ;
    ldx airRemainingOffsetWithinCell    ;
    jsr storeByte                       ; store left byte of air
    tay                                 ; store A
    txa                                 ; }
    clc                                 ; }
    adc #8                              ; } X += 8
    tax                                 ; }
    tya                                 ; recall A
    jsr storeByte                       ; store right byte of air
    rts                                 ;

; ***************************************************************************************
airAtEndOfCell
    lda #0                          ;
    sta airRemainingOffsetWithinCell;
    jsr gotoNextRow                 ;
    jmp readAirByte                 ;

; ***************************************************************************************
setByteToWrite
    lda #$0f                        ;
    jmp writeTwoBytesToScreenForAir ;

; ***************************************************************************************
airRemainingOffsetWithinCell
    !byte $ea                       ;
airRemainingDelayCounter
    !byte $ea                       ;

updateKongFalling
    lda kongYCoordinate             ;
    cmp #112                        ;
    bcs resetKongTriggered          ; if (kongY >= 112) then branch (reset trigger)
    cmp #16                         ;
    beq lowerKong                   ; if (kongY == 16) then branch
    and #4                          ;
    cmp #4                          ;
    beq YIsAMultipleOfFour          ;
    jsr isKongLow                   ;
    jsr checkKongHeight2            ;

    lda kongYCoordinate             ;
    clc                             ;
    adc #4                          ; lower kong
    sta kongYCoordinate             ;

    ldx #0                          ;
    jsr checkKongHeight             ;
    jmp setColour2AndShowExit       ;

YIsAMultipleOfFour
    jsr isKongLow                   ;
    jsr checkKongHeight             ;

    lda kongYCoordinate             ;
    clc                             ; lower kong
    adc #4                          ;
    sta kongYCoordinate             ;

    ldx #0                          ;
    jsr checkKongHeight2            ;
    jmp setColour2AndShowExit       ;

resetKongTriggered
    lda #0                          ;
    sta kongBeastSwitchTriggered    ;
    jmp setColour2AndShowExit       ;

kongYCoordinate
    !byte $ea                       ;

lowerKong
    lda kongYCoordinate             ;
    clc                             ;
    adc #4                          ;
    sta kongYCoordinate             ;
    jmp checkKongHeight             ;

checkKongHeight2
    cpx #1                              ;
    beq kongIsLow                       ;
    lda #<verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressLow      ; } $0480
    lda #>verticalGuardianMODE1Address2 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp kongIsNotLow                    ;

checkKongHeight
    cpx #1                              ;
    beq kongIsLow                       ;

    lda #<verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressLow      ; } $04c0
    lda #>verticalGuardianMODE1Address3 ; }
    sta plotSourceSpriteAddressHigh     ; }
    jmp kongIsNotLow                    ; [redundant]

kongIsNotLow
    lda #$39                        ;
    jsr addToScore                  ; add 40 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #10                         ;
    jmp plot                        ;

kongIsLow
    lda #$69                        ;
    jsr addToScore                  ; add 70 to score
    ldx #78                         ;
    ldy kongYCoordinate             ;
    lda #2                          ;
    jmp plot                        ;

setColour2AndShowExit
    lda #17                         ; VDU 17 (COLOUR)
    jsr OSWRCH                      ;
    lda #2                          ; COLOUR 2
    jmp setColourAndShowExit        ;

isKongLow
    lda kongYCoordinate             ;
    cmp #96                         ;
    bcs +                           ; if (kong low enough) then return 1
    ldx #0                          ;
    rts                             ;
+
    ldx #1                          ;
    rts                             ;

; ***************************************************************************************
;
; On Entry:
;   (A+1) is the BCD value of the score to add
;
; ***************************************************************************************
addToScore
    cmp #$63                        ; if score to add is 99 (BCD) then it's a key taken
    beq keyTaken                    ;

incrementScore
    clc                             ; }
    adc #1                          ; }
    sed                             ; }
    clc                             ; } add (A+1) to score (binary coded decimal)
    adc score                       ; }
    sta score                       ; }
    lda score + 1                   ; }
    adc #0                          ; }
    sta score + 1                   ; }
    lda score + 2                   ;
    bcs extraLife                   ; if (score passes each 10000 boundary) then branch (extra life)

printScoreAndLives
    cld
    lda #31                         ; }
    jsr OSWRCH                      ; }
    lda #10                         ; } TAB(10,19)
    jsr OSWRCH                      ; }
    lda #19                         ; }
    jsr OSWRCH                      ; }

    lda #17                         ; }
    jsr OSWRCH                      ; }
    lda #3                          ; } COLOUR 3
    jsr OSWRCH                      ; }

    ; print three pairs of numbers for the score
    ldx #2                          ;
-
    lda score,x                     ;
    jsr printBCDNumber              ;
    dex                             ;
    cpx #$ff                        ;
    bne -                           ;

    ; move eight positions right
    lda #9                          ; forward space
    ldx #8                          ; loop eight times
-
    jsr OSWRCH                      ;
    dex                             ;
    bne -                           ;

    ; print lives
    lda lives                       ;
    jmp printBCDNumber              ;

extraLife
    adc #0                          ;
    sta score + 2                   ;
    cld                             ;

    lda #3                          ;
    ldx #100                        ;
    ldy #4                          ;
    jsr playSoundAXY                ; Play sound for extra life: SOUND
    inc lives                       ;
    jmp printScoreAndLives          ;

; ***************************************************************************************
;
; print two digits: 0-9 from the upper nybble, then 0-9 from the lower nybble
;
; ***************************************************************************************
printBCDNumber
    tay                             ;
    and #$f0                        ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    lsr                             ;
    clc                             ;
    adc #$30                        ;
    jsr OSWRCH                      ;
    tya                             ;
    and #$0f                        ;
    clc                             ;
    adc #$30                        ;
    jmp OSWRCH                      ;

; ***************************************************************************************
score
    !byte $00, $00, $00             ;
    !byte $00                       ;
lives
    !byte $ea                       ;

; ***************************************************************************************
keyTaken
    lda #$02                        ; }
    ldx #$c8                        ; }
    ldy #$01                        ; } SOUND
    jsr playSoundAXY                ; }

    lda #1                          ;
    sta switchTriggered             ; getting a key triggers the switch?

    lda #$49                        ;
    jsr incrementScore              ; add 50 to score
    lda #$49                        ;
    jmp incrementScore              ; add 50 to score

; ***************************************************************************************
death
    jsr pauseMusic                  ;

    lda #$01                        ; }
    ldx #$c8                        ; } Play death sound
    ldy #$01                        ; }
    jsr playSoundAXY                ; }

    ldx #$fd                        ;
    txs                             ; fix the stack pointer!

    lda lives                       ;
    cmp #0                          ; [redundant]
    beq gameOver                    ; if (already zero lives left) then branch (game over)

    dec lives                       ;

    lda currentLevel                ;
    jsr showLevel                   ;
    jsr updateMusicState            ;
    jmp playCurrentLevel            ;

; ***************************************************************************************
gameOver
    ; clear screen
    lda #>screenStartAddress        ;
    sta $71                         ;
    lda #<screenStartAddress        ; ($70,$71) = $3280
    sta $70                         ;

    ldx #41                         ;
    ldy #0                          ;
    tya                             ;
clearScreenLoop
    sta ($70),y                     ;
    iny                             ;
    bne clearScreenLoop             ;

    inc $71                         ;
    dex                             ;
    bne clearScreenLoop             ;

    jsr drawRoomName                ;

    ; copy 32 bytes (4 characters worth) into drawable region at softCharacterDefinitions
    ldx #0                          ; loop counter
-
    lda pedestalSprite,x            ;
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;

    ; draw pedestal
    ldx #0                          ; loop counter
-
    lda pedestalMessage,x           ;
    jsr OSWRCH                      ;
    inx                             ;
    cpx #$0c                        ; loop 12 times
    bne -                           ;

    lda #<willyRight2               ; }
    sta plotSourceSpriteAddressLow  ; }
    lda #>willyRight2               ; } sprite address = $0580 (address of willy)
    sta plotSourceSpriteAddressHigh ; }

    ldx #78                         ;
    ldy #104                        ;
    lda #3                          ;
    jsr plot                        ; plot willy (on the pedestal)

    lda #8                          ;
    sta footPositionY               ;
footDescendingLoop
    lda #<footSprite                ; }
    sta plotSourceSpriteAddressLow  ; } set address to foot sprite
    lda #>footSprite                ; }
    sta plotSourceSpriteAddressHigh ; }
    ldx #$4e                        ;
    ldy footPositionY               ;
    lda #3                          ;
    jsr plot                        ; draw foot

    ldx #$ff                        ;
    ldy #$40                        ; loop counter
-
    dex                             ;
    bne -                           ; delay
    lda footPositionY               ;
    lsr                             ;
    eor #$3f                        ;
    sta channel2Frequency           ; increase pitch
    dey                             ;
    bne -                           ; if (not zero) then branch (loop back)

    inc footPositionY               ;
    inc footPositionY               ;
    lda footPositionY               ;
    cmp #106                        ;
    bne footDescendingLoop          ;

    lda #$9f                        ;
    jsr soundDirect                 ; silence sound

    lda #$10                        ; delay amount
    jsr delayAndClearPedestalSprite ;
    jmp zeroScoreJumper             ;

; ***************************************************************************************
delayAndClearPedestalSprite
    sta $70                         ;
delayOuterLoop
    ldx #$ff                        ;
    ldy #$ff                        ;
-
    dex                             ;
    bne -                           ;
    dey                             ;
    bne -                           ;
    dec $70                         ;
    bne delayOuterLoop              ;

    ; clear pedestal sprite
    ldx #0                          ;
    txa                             ;
-
    sta softCharacterDefinitions,x  ;
    inx                             ;
    cpx #$40                        ;
    bne -                           ;
    rts                             ;

; ***************************************************************************************
pedestalMessage
    !byte $11, $03                  ; COLOUR 3
    !byte $1f, $13, $0f             ; TAB(19,15)
    !byte $80, $81                  ; draw leg
    !byte $0a, $08, $08             ; down and back
    !byte $82, $83                  ; draw foot

footPositionY
    !byte $ea

; ***************************************************************************************
;
; A = Amplitude
; X = pitch
; Y = duration
;
; ***************************************************************************************
playSoundAXY
    sta oswordSoundBlock + 2        ;
    stx oswordSoundBlock + 4        ;
    sty oswordSoundBlock + 6        ;
    lda #7                          ;
    ldx #<oswordSoundBlock          ; SOUND
    ldy #>oswordSoundBlock          ;
    jmp OSWORD                      ;

; ***************************************************************************************
collideWithGuardians
    lda plotSourceSpriteAddressLow      ; }
    sec                                 ; }
    sbc #39                             ; }
    sta plotSourceSpriteAddressLow      ; } subtract 39 from sprite address
    lda plotSourceSpriteAddressHigh     ; }
    sbc #0                              ; }
    sta plotSourceSpriteAddressHigh     ; }

    ldx newPlayerPixelX                 ;
    ldy newPlayerPixelY                 ;
    lda #6                              ;
    jsr plot                            ;
    jsr checkForDeath                   ;
    jsr checkForSwitchFlipped           ;
    jsr collideWithVerticalGuardians    ;

collideWithHorizontalGuardians
    lda #3                              ;
    sta collisionLimit1                 ;
    lda #4                              ;
    sta collisionLimit2                 ;
    lda willyAnimationEOR               ;
    cmp #3                              ;
    bne willyPointingRight              ;

    ; willy pointing left
    lda #4                              ;
    sta collisionLimit1                 ; set left/right limits for willy collision
    lda #3                              ;
    sta collisionLimit2                 ;

willyPointingRight
    lda playerPixelX                    ;
    and #3                              ;
    eor willyAnimationEOR               ;
    cmp #3                              ;
    bne checkCollision                  ;

    lda willyAnimationEOR               ;
    cmp #3                              ;
    bne +                               ;
    lda #5                              ;
    sta collisionLimit1                 ;
    jmp checkCollision                  ;

+
    lda #5                              ;
    sta collisionLimit2                 ;

    ; loop to check each guardian
checkCollision
    ldx #0                              ;
checkCollisionLoop
    lda guardianPositions,x             ;
    cmp #$ff                            ;
    beq return8                         ; if (out of guardians) then return
    jsr checkCollisionForOneGuardian    ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    jmp checkCollisionLoop              ;

; ***************************************************************************************
checkCollisionForOneGuardian
    clc                                 ;
    adc #19                             ;
    sec                                 ;
    sbc playerPixelX                    ; guardianX + 19 - playerX
collisionLimit1 = * + 1
    cmp #3                              ;
    bcc possibleCollisionInX            ; if (guardianX + 19 - playerX < limit1) then branch
    eor #$fe                            ; [attempt to negate value, not correct]
collisionLimit2 = * + 1
    cmp #3                              ;
    bcc possibleCollisionInX            ; if (255 - guardianX - 19 + playerX < limit2) then branch
return8
    rts                                 ;

possibleCollisionInX
    inx                                 ;
    lda guardianPositions,x             ; get guardian cell Y
    sec                                 ;
    sbc #1                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    cmp playerPixelY                    ;
    bcc possibleCollisionInY            ; if ((guardianCellY - 1) * 8) < playerY then branch
    dex                                 ;
    rts                                 ;

possibleCollisionInY
    lda guardianPositions,x             ;
    dex                                 ;
    clc                                 ;
    adc #3                              ;
    asl                                 ;
    asl                                 ;
    asl                                 ;
    sec                                 ;
    sbc #1                              ;
    cmp playerPixelY                    ; if (((guardian cell Y + 3) * 8) - 1) > playerY then branch (collision found)
    bcs deathJumper3                    ;
    rts                                 ;

deathJumper3
    jmp death                           ;

; ***************************************************************************************
collideWithVerticalGuardians
    lda #0                              ;
    sta collisionFudgeFactor            ;
    lda playerPixelX                    ;
    and #3                              ;
    eor willyAnimationEOR               ;
    cmp #0                              ;
    beq +                               ;
    lda #1                              ;
    sta collisionFudgeFactor            ;
+
    lda currentLevel                    ;
    cmp #5                              ;
    bne notLevel5                       ;

    ; level 5 specific code
    lda eugenePositionY                 ;
    and #$7f                            ;
    sec                                 ;
    sbc #8                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

    lda #$ff                            ; } only one vertical guardian on level 5
    sta verticalGuardian2               ; }

    lda #$0f                            ; } column 15
    sta currentVerticalGuardians        ; }

notLevel5
    lda currentLevel                    ;
    cmp #8                              ;
    beq kongSpecifics                   ;
    cmp #12                             ;
    beq kongSpecifics                   ;
    jmp regularLevels                   ;

    ; Kong levels specific code
kongSpecifics
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    lda $33c0                           ; screen byte where Kong lives
    cmp #0                              ;
    beq regularLevels                   ;
    lda #$0f                            ; }
    sta currentVerticalGuardians        ; } column 15

    lda #$ff                            ; } only one vertical guardian on Kong levels
    sta verticalGuardian2               ; }

    lda #0                              ;
    sta currentVerticalGuardians + 1    ; Y coordinate

regularLevels
    lda #$f1                            ;
    sta largestYExtent                  ;
    lda currentLevel                    ;
    cmp #14                             ;
    bne +                               ;

    ; level 14 specific code
    lda #$f1                            ;
    sta largestYExtent                  ;

    ; check for collisions with all vertical guardians
+
    ldx #0                              ; loop counter
verticalGuardianCollisionLoop
    lda currentVerticalGuardians,x      ;
    cmp #$ff                            ;
    beq return9                         ; if (no vertical guardians) then branch (return)
    jsr checkOneVerticalCollision       ;
    txa                                 ;
    clc                                 ;
    adc #4                              ;
    tax                                 ;
    cpx #16                             ;
    bcs return9                         ;
    jmp verticalGuardianCollisionLoop   ;

; ***************************************************************************************
checkOneVerticalCollision
    lda currentVerticalGuardians,x      ;
    and #$3f                            ;
    clc                                 ;
    adc #5                              ;
    asl                                 ;
    asl                                 ;
    sta tempScreenByte                  ;
    lda playerPixelX                    ;
    clc                                 ;
    adc #4                              ;
    sec                                 ;
    sbc tempScreenByte                  ; playerX + 4 - (guardianX + 5) * 4
    cmp #0                              ;
    beq checkVerticalCollision          ;
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    sec                                 ;
    sbc collisionFudgeFactor            ; subtract 0 or 1
    cmp #7                              ;
    bcc checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; subtract 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
    clc                                 ;
    adc collisionFudgeFactor            ; subtract 0 or 1
    cmp #$fd                            ;
    bcs checkVerticalCollision          ;
return9
    rts                                 ;

; ***************************************************************************************
checkVerticalCollision
    lda currentVerticalGuardians + 1,x  ;
    clc                                 ;
    adc #8                              ;
    sec                                 ;
    sbc playerPixelY                    ;
    cmp #19                             ;
    bcc deathJumper4                    ; if ( guardianY + 8 - playerY < 19) then branch (die)
largestYExtent = * + 1
    cmp #$f0                            ; if (guardianY + 8 - playerY > largestYExtent) then branch (die)
    bcs deathJumper4                    ;
    rts                                 ;

; ***************************************************************************************
deathJumper4
    jmp death                           ;

; ***************************************************************************************
toggleEugeneColour
    lda eugeneColourMask                ;
    eor #$0f                            ;
    sta eugeneColourMask                ;

    jsr drawSpecialVerticalSprites      ;

    lda #$ff                            ;
    sta spriteColourMask                ;
    rts                                 ;

showScoreAndResetVerticalGuardians
    jsr showScoreLivesAndLevel          ;
    lda #$ff                            ;
    sta currentVerticalGuardians        ;
    rts                                 ;

checkForSwitchFlipped
    lda $332e                           ; screen address that becomes non-zero when the switch is flipped
    cmp #0                              ;
    bne switchFlipped                   ;
    rts                                 ;

switchFlipped
    lda currentLevel                    ;
    cmp #8                              ;
    beq level8SwitchFlipped             ;
    cmp #12                             ;
    bne +                               ;

    ; level 12 switch flipped
    lda #$47                            ;
    sta guardianPositions + 3           ;
+
    rts                                 ;

level8SwitchFlipped
    lda #$47                            ;
    sta guardianPositions + 7           ;
return6
    rts                                 ;

; ***************************************************************************************
updateAirEtc
    lda airRemaining                    ;
    cmp #0                              ;
    beq deathJumper5                    ; if (out of air) then branch (die)

    lda playerPixelY                    ;
    cmp willyHighestPointReachedOnCurrentJump ;
    bcs +                               ;
    sta willyHighestPointReachedOnCurrentJump ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp #0                              ;
    beq +                               ;
    lda #0                              ;
    sta willyIsOnGround                 ;
+
    lda playerPixelY                    ;
    and #7                              ;
    cmp willyOffsetWithinCellY          ;
    bne setOffsetYWithinCell            ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    lda willyIsOnGround                 ;
    cmp #0                              ;
    bne setOffsetYWithinCell            ;

    ; land (or die if fallen too far)
    lda #$ff                            ;
    sta willyIsOnGround                 ;
    jsr drawConveyors                   ;
    lda playerPixelY                    ;
    sec                                 ;
    sbc willyHighestPointReachedOnCurrentJump   ;
    cmp #$28                            ;
    bcc +                               ; if (fall is less than 40 pixels) then branch
    jmp death                           ;

+
    lda playerPixelY                            ;
    sta willyHighestPointReachedOnCurrentJump   ;

setOffsetYWithinCell
    lda playerPixelY                    ;
    and #7                              ;
    sta willyOffsetWithinCellY          ;
    rts                                 ;

; ***************************************************************************************
hitLevel20EnergyField
    jsr swapEnergyFieldSpritesWith0C00  ;
deathJumper5
    jmp death                           ;

; ***************************************************************************************
checkForDeath
    jsr updateAirEtc                    ;
    lda currentLevel                    ;
    cmp #20                             ;
    bne return6                         ;
    inc level20EnergyFieldsTimer        ;
    jsr swapEnergyFieldSpritesWith0C00  ;
    lda level20EnergyFieldsTimer        ;
    and #$10                            ;
    cmp #0                              ;
    beq toggleLevel20EnergyFields       ;

    ; check for collision
    lda $4f42                           ; read screen byte directly
    and #$80                            ;
    cmp #0                              ; top bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $3942                           ; read screen byte directly
    and #$80                            ;
    cmp #0                              ; top bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $394a                           ; read screen byte directly
    and #1                              ;
    cmp #0                              ; bottom bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda $4f4a                           ; read screen byte directly
    and #1                              ;
    cmp #0                              ; bottom bit set indicates a collision
    bne hitLevel20EnergyField           ;

    lda level20EnergyFieldsTimer        ;
    and #1                              ;
    cmp #0                              ;
    beq level20SwitchEnergyFieldSprite  ;
    lda #0                              ;
    sta energyFieldSpriteOffset         ;
drawLevel20EnergyFieldString
    ldx #0                              ;
-
    lda level20EnergyFieldsString,x     ;
    jsr OSWRCH                          ;
    inx                                 ;
    cpx #5                              ;
    beq +                               ;
backToLevel20EnergyFieldString
    cpx #8                              ;
    bne -                               ;
    jsr drawLevel20EnergyField          ;
    jmp swapEnergyFieldSpritesWith0C00  ;

+
    jsr drawLevel20EnergyField          ;
    jmp backToLevel20EnergyFieldString  ;

; ***************************************************************************************
drawLevel20EnergyField
    lda #$e0                            ;
    clc                                 ;
    adc energyFieldSpriteOffset         ;
    jsr OSWRCH                          ; draw first character of energy field
    tay                                 ;
    iny                                 ;
    lda #$0a                            ; move down
    jsr OSWRCH                          ;
    lda #8                              ; move left
    jsr OSWRCH                          ;
    tya                                 ;
    jmp OSWRCH                          ; draw second character of energy field

; ***************************************************************************************
level20SwitchEnergyFieldSprite
    lda #2                              ;
    sta energyFieldSpriteOffset         ;
    jmp drawLevel20EnergyFieldString    ;

; ***************************************************************************************
toggleLevel20EnergyFields
    lda #4                              ;
    sta energyFieldSpriteOffset         ;
    lda level20EnergyFieldsTimer        ;
    and #$0f                            ;
    cmp #0                              ;
    bne swapEnergyFieldSpritesWith0C00  ;
    jmp drawLevel20EnergyFieldString    ;

; ***************************************************************************************
swapEnergyFieldSpritesWith0C00
    ldx #$40                            ;
-
    lda softCharacterDefinitions,x      ;
    tay                                 ;
    lda energyFieldSprites,x            ;
    sta softCharacterDefinitions,x      ;
    tya                                 ;
    sta energyFieldSprites,x            ;
    dex                                 ;
    bne -                               ;
    rts                                 ;

    ; $6b72
; ***************************************************************************************
level20EnergyFieldsString
    !byte $11, $02                                  ; COLOUR 2
    !byte $1f, $14, $0b                             ; TAB(20,11)
    !byte $1f, $1c, $02                             ; TAB(28, 2)

level20EnergyFieldsTimer
    !byte $ea

willyHighestPointReachedOnCurrentJump
    !byte $ea                                       ;
willyIsOnGround
    !byte $ea                                       ;
willyOffsetWithinCellY
    !byte $ea                                       ;

airRemaining
    !byte $ea                                       ;

cheatModeEnabled
    !byte $00                                       ;

oswordSoundBlock
    !byte $01, $00, $00, $00, $00, $00, $00, $00    ;

    ; $6b88
playerStartPositions
    ;level  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20
    !byte $0e, $0e, $0e, $de, $04, $74, $0e, $0e, $0e, $05, $12, $0e, $ee, $8e, $0e, $4e, $04, $de, $0e, $0e

    !byte $de, $0e, $0e, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    !byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

    ; $dbe0
    !byte $0f, $0f, $0d, $02, $0c, $02, $00, $ff, $0f, $0f, $0b, $0e, $05, $00, $00, $ff
    !byte $0f, $0f, $0d, $02, $0c, $02, $00, $ff, $0f, $0f, $0b, $0e, $05, $00, $00, $ff

    ; $6c00
levelDefinitions
    !byte $ff, $ff, $10, $02, $00, $01, $00, $00, $01, $21, $10, $04, $0d, $0f, $1b, $0c
    !byte $03, $1c, $0a, $02, $00, $09, $04, $00, $07, $03, $00, $05, $0e, $11, $05, $01
    !byte $16, $05, $08, $ff, $16, $0c, $05, $0d, $05, $04, $12, $05, $04, $ff, $13, $0c
    !byte $03, $10, $08, $03, $ff, $07, $09, $14, $ff, $ff, $54, $07, $00, $01, $01, $80
    !byte $02, $21, $10, $0d, $0c, $04, $08, $09, $07, $00, $07, $01, $00, $05, $13, $14
    !byte $06, $04, $17, $03, $01, $ff, $07, $0d, $04, $12, $0a, $04, $14, $03, $03, $01
    !byte $07, $05, $19, $06, $02, $fe, $19, $08, $02, $0d, $ff, $12, $00, $0c, $fe, $18
    !byte $06, $01, $0d, $fe, $1b, $05, $01, $0d, $ff, $02, $0b, $04, $ff, $ff, $64, $07
    !byte $11, $02, $10, $42, $00, $21, $0e, $04, $0c, $06, $14, $0d, $0a, $0d, $0b, $05
    !byte $18, $0a, $06, $1a, $07, $04, $00, $07, $06, $00, $05, $04, $ff, $04, $05, $1a
    !byte $ff, $1e, $00, $01, $ff, $05, $09, $06, $ff, $ff, $20, $05, $00, $01, $00, $01
    !byte $00, $21, $04, $05, $0c, $02, $06, $08, $02, $00, $05, $01, $06, $05, $01, $0b
    !byte $0b, $03, $0b, $06, $02, $10, $05, $01, $11, $0d, $02, $11, $09, $03, $12, $03
    !byte $06, $14, $06, $03, $15, $0b, $03, $19, $08, $03, $1b, $0c, $03, $1d, $0a, $01
    !byte $1a, $04, $04, $ff, $00, $07, $03, $ff, $0e, $00, $10, $ff, $00, $0a, $03, $ff
    !byte $ff, $24, $07, $00, $01, $02, $80, $00, $13, $10, $00, $0d, $02, $02, $0b, $0b
    !byte $03, $09, $0a, $00, $05, $0d, $11, $0b, $07, $1d, $0b, $01, $15, $05, $06, $1c
    !byte $06, $02, $ff, $00, $0b, $02, $11, $05, $04, $ff, $07, $0f, $10, $0d, $0e, $0a
    !byte $0d, $0d, $04, $fe, $07, $0c, $01, $10, $ff, $11, $08, $0a, $ff, $ff, $20, $06
    !byte $20, $01, $00, $81, $00, $21, $03, $00, $09, $02, $02, $06, $02, $07, $05, $03
    !byte $0e, $05, $02, $06, $0a, $13, $14, $05, $05, $1b, $0c, $03, $15, $0d, $02, $1b
    !byte $06, $03, $16, $08, $05, $ff, $1d, $00, $01, $ff, $fe, $0f, $06, $01, $08, $fe
    !byte $0f, $0a, $01, $0d, $ff, $02, $0d, $04, $ff, $ff, $10, $02, $03, $02, $00, $02
    !byte $00, $13, $10, $08, $0d, $03, $00, $0a, $0b, $0d, $09, $03, $00, $08, $01, $00
    !byte $06, $03, $0d, $05, $03, $0e, $03, $02, $ff, $fe, $11, $03, $0d, $0d, $ff, $fe
    !byte $10, $03, $01, $0d, $0d, $0c, $04, $fe, $0d, $0d, $01, $10, $0d, $0f, $11, $0d
    !byte $00, $11, $ff, $06, $05, $05, $ff, $ff, $10, $02, $00, $02, $03, $82, $00, $13
    !byte $10, $03, $0c, $02, $03, $0c, $02, $00, $0a, $01, $01, $07, $03, $00, $05, $03
    !byte $08, $05, $06, $0e, $02, $02, $08, $0b, $02, $0b, $0a, $03, $07, $08, $03, $11
    !byte $05, $02, $14, $06, $04, $11, $09, $05, $11, $0d, $02, $15, $0c, $05, $1a, $0a
    !byte $04, $1a, $07, $01, $1d, $06, $01, $1c, $02, $02, $ff, $10, $0e, $01, $ff, $fe
    !byte $10, $00, $01, $0f, $fe, $13, $00, $01, $02, $fe, $0d, $0d, $01, $0f, $ff, $0a
    !byte $0d, $03, $ff, $ff, $10, $02, $00, $02, $00, $83, $00, $05, $03, $02, $0c, $1a
    !byte $02, $08, $08, $00, $05, $1c, $00, $0a, $02, $1c, $0d, $02, $1c, $07, $02, $15
    !byte $09, $07, $ff, $02, $00, $01, $ff, $fe, $02, $00, $01, $01, $ff, $0c, $08, $07
    !byte $fd, $04, $fe, $04, $04, $02, $0e, $fe, $0a, $04, $02, $0e, $fe, $13, $04, $02
    !byte $0e, $fe, $18, $04, $02, $0e, $fd, $03, $ff, $ff, $20, $01, $32, $01, $34, $43
    !byte $00, $11, $10, $00, $0d, $03, $00, $0a, $04, $00, $08, $05, $00, $06, $04, $00
    !byte $02, $06, $0c, $00, $03, $07, $05, $01, $08, $09, $07, $10, $0a, $07, $10, $07
    !byte $07, $10, $04, $04, $14, $00, $0a, $1a, $02, $04, $16, $05, $08, $1c, $09, $02
    !byte $1b, $0d, $03, $ff, $04, $0a, $02, $08, $05, $07, $17, $07, $03, $17, $0b, $03
    !byte $ff, $fe, $0f, $00, $01, $0c, $ff, $00, $0f, $1e, $07, $0c, $0a, $ff, $ff, $64
    !byte $07, $00, $00, $76, $80, $00, $05, $04, $00, $03, $04, $04, $05, $06, $00, $08
    !byte $02, $00, $0d, $02, $1b, $0c, $03, $16, $0d, $03, $1b, $0a, $01, $1c, $08, $02
    !byte $1c, $06, $02, $0a, $09, $09, $0e, $05, $0a, $08, $0b, $01, $ff, $05, $0b, $03
    !byte $ff, $00, $00, $05, $ff, $04, $08, $02, $ff, $ff, $50, $06, $00, $02, $03, $84
    !byte $00, $13, $10, $0a, $0d, $03, $00, $0c, $06, $05, $0a, $01, $05, $07, $02, $02
    !byte $08, $01, $00, $05, $03, $09, $09, $04, $11, $0a, $03, $18, $0b, $02, $18, $08
    !byte $06, $1d, $06, $01, $17, $05, $02, $ff, $11, $05, $06, $08, $05, $05, $0e, $02
    !byte $02, $ff, $10, $00, $01, $14, $00, $01, $fe, $10, $05, $01, $0f, $fe, $0d, $05
    !byte $01, $0a, $fe, $0d, $0d, $01, $0f, $0d, $0f, $04, $ff, $11, $0d, $0b, $ff, $ff
    !byte $20, $07, $50, $02, $05, $40, $00, $05, $10, $00, $0f, $1e, $06, $03, $18, $06
    !byte $06, $18, $06, $0c, $18, $06, $09, $18, $ff, $fe, $02, $01, $01, $0f, $ff, $00
    !byte $00, $1e, $ff, $02, $0f, $1a, $fd, $04, $08, $06, $02, $09, $0c, $02, $15, $06
    !byte $02, $14, $0c, $02, $0e, $06, $02, $0e, $0c, $02, $10, $09, $02, $1b, $06, $02
    !byte $1a, $0c, $02, $0b, $09, $02, $18, $09, $02, $18, $03, $02, $fd, $04, $ff, $ff
    !byte $24, $05, $60, $02, $27, $85, $00, $13, $03, $00, $0b, $00, $02, $06, $00, $04
    !byte $09, $00, $06, $0d, $00, $06, $07, $00, $08, $0b, $00, $0c, $09, $00, $0a, $06
    !byte $00, $0e, $05, $00, $12, $06, $00, $16, $07, $00, $14, $09, $00, $1a, $06, $00
    !byte $1c, $09, $00, $18, $0b, $00, $fd, $02, $00, $0f, $1e, $ff, $0e, $0b, $06, $ff
    !byte $ff, $20, $06, $00, $00, $78, $41, $00, $05, $06, $00, $0a, $02, $02, $08, $02
    !byte $00, $05, $05, $04, $0c, $03, $0b, $0d, $02, $0b, $0a, $02, $0b, $07, $02, $11
    !byte $0b, $02, $11, $08, $02, $17, $06, $02, $18, $09, $02, $16, $0c, $02, $17, $03
    !byte $05, $ff, $06, $07, $01, $ff, $05, $00, $19, $ff, $07, $03, $10, $fe, $1c, $01
    !byte $02, $0f, $07, $03, $10, $ff, $ff, $10, $06, $00, $02, $09, $86, $00, $10, $08
    !byte $00, $0c, $09, $0b, $0b, $02, $00, $05, $01, $05, $05, $01, $03, $07, $01, $14
    !byte $0d, $01, $1a, $0d, $01, $1a, $0b, $01, $19, $07, $05, $16, $05, $03, $ff, $00
    !byte $09, $02, $ff, $09, $0b, $02, $fe, $0a, $05, $01, $09, $0d, $05, $01, $0d, $06
    !byte $02, $0d, $07, $03, $0d, $08, $04, $ff, $02, $09, $19, $ff, $ff, $20, $06, $03
    !byte $01, $50, $87, $00, $21, $04, $1a, $0e, $04, $1c, $05, $02, $00, $05, $02, $00
    !byte $0f, $1e, $ff, $02, $05, $1a, $fe, $00, $06, $1e, $0d, $ff, $1c, $00, $02, $ff
    !byte $0d, $08, $05, $fd, $04, $fe, $02, $08, $02, $0d, $fe, $09, $05, $02, $0d, $fe
    !byte $12, $05, $02, $0a, $fe, $1a, $05, $02, $0d, $fd, $04, $ff, $ff, $10, $06, $00
    !byte $00, $40, $88, $00, $21, $03, $00, $0f, $1e, $00, $0d, $02, $02, $0c, $1a, $02
    !byte $09, $07, $00, $07, $02, $02, $05, $1c, $0a, $08, $12, $1c, $0a, $02, $fd, $02
    !byte $1b, $00, $01, $fd, $04, $fe, $04, $05, $02, $0d, $fe, $09, $05, $02, $0d, $fe
    !byte $13, $05, $02, $0d, $fe, $18, $05, $02, $0d, $fd, $04, $ff, $ff, $24, $07, $00
    !byte $01, $00, $89, $00, $13, $07, $00, $05, $02, $02, $08, $03, $08, $0d, $0e, $05
    !byte $06, $03, $07, $0a, $04, $17, $0b, $02, $16, $07, $02, $1a, $05, $04, $1b, $09
    !byte $03, $ff, $fd, $02, $fe, $0a, $03, $0a, $0b, $ff, $02, $0c, $03, $ff, $fe, $0a

    ; $7100
    !byte $04, $0a, $06, $fe, $0a, $08, $0a, $0a, $fd, $03, $ff, $ff, $20, $06, $00, $01
    !byte $00, $8a, $01, $21, $04, $07, $05, $07, $0d, $03, $07, $00, $08, $02, $08, $07
    !byte $07, $1b, $07, $03, $10, $07, $04, $13, $0d, $01, $10, $0c, $01, $16, $0d, $01
    !byte $18, $09, $01, $ff, $00, $09, $01, $14, $03, $03, $14, $0a, $01, $17, $0d, $02
    !byte $ff, $0c, $00, $12, $17, $03, $05, $03, $07, $05, $00, $0b, $02, $00, $0c, $0b
    !byte $0d, $0e, $03, $0e, $0d, $02, $0f, $0c, $01, $fe, $0f, $07, $01, $0a, $0a, $0b
    !byte $01, $ff, $02, $0b, $08, $fe, $1c, $03, $02, $07, $02, $0b, $08, $ff, $ff, $ff

levelSingleItemDefinitions
    ; level 1
    ; $ff   separator
    ; $fe
    !byte $ff, $c1, $80, $f1, $fe, $74, $c0, $d6, $bc, $fe, $48, $64, $a4, $fd, $a0, $f0

    ; $7180
    !byte $ff, $c1, $29, $61, $fe, $71, $97, $2c, $fd, $fe, $d1, $ff, $c2, $50, $e0, $fe
    !byte $60, $d6, $46, $fd, $08, $03, $90, $00, $fe, $10, $01, $a0, $00, $ff, $c2, $00
    !byte $b1, $f6, $fe, $81, $d6, $fd, $60, $00, $fe, $6c, $00, $ff, $c0, $6c, $8c, $96
    !byte $fe, $d1, $c7, $4e, $fe, $7e, $8e, $47, $74, $fd, $fe, $30, $ff, $c4, $0a, $cb
    !byte $e6, $fe, $06, $d7, $2c, $fd, $fe, $0b, $44, $ff, $c5, $fe, $2a, $36, $a7, $d3
    !byte $db, $fd, $fe, $6c, $68, $ba, $b5, $ff, $80, $18, $d6, $b2, $fe, $cd, $fe, $6e
    !byte $ff, $00, $f1, $f1, $fe, $ff, $c6, $d1, $b6, $fe, $18, $42, $d1, $fd, $23, $09
    !byte $90, $fe, $10, $30, $41, $6b, $da, $ff, $c2, $04, $fe, $26, $70, $d1, $dd, $fd

    ; $7200
    !byte $ba, $02, $fe, $20, $01, $2a, $01, $76, $03, $ff, $c0, $16, $e3, $f7, $fe, $95
    !byte $cd, $fe, $6c, $bc, $ff, $c0, $ac, $96, $fe, $93, $99, $29, $fe, $ff, $80, $28
    !byte $f7, $fe, $62, $a7, $fe, $ff, $42, $b6, $fe, $82, $9e, $fd, $74, $01, $fe, $b4
    !byte $06, $ff, $87, $00, $c7, $fe, $0a, $d2, $fd, $fe, $6e, $7e, $8e, $ff, $c8, $09
    !byte $e7, $fe, $2a, $75, $9b, $54, $84, $c4, $f4, $fe, $54, $74, $fd, $26, $8b, $fe
    !byte $5a, $97, $ff, $00, $e1, $e1, $fe, $ff, $c1, $02, $c8, $fe, $d1, $dc, $18, $fe
    !byte $ff, $c2, $88, $fe, $0d, $28
pokeSingleItem
    !byte $61, $db, $66, $fe, $06, $2e, $4e, $fd, $40, $02
    !byte $fe, $b8, $03, $ff, $f0, $07, $c9, $ff, $f0, $09, $00, $00, $00, $00, $00, $00

    ; $7280
guardianGraphics
    !byte %...#####                 ;     #####  #
    !byte %..###..#                 ;    ###  ####
    !byte %...##..#                 ;     ##  ####
    !byte %....####                 ;      ####  #
    !byte %#..#####                 ;  #  #####
    !byte %.#.#####                 ;   # ######
    !byte %########                 ;  ##########
    !byte %.#.####.                 ;   # ####
                                    ;  #  #######
    !byte %..#.....                 ;     ######
    !byte %###.....                 ;      ###
    !byte %###.....                 ;     #####
    !byte %..#.....                 ;  # ### ###
    !byte %........                 ;   ###   ####
    !byte %#.......                 ;    #     ##
    !byte %##......                 ;     #    #
    !byte %........

    !byte %.....###
    !byte %....###.
    !byte %.....##.
    !byte %..#...##
    !byte %...#.###
    !byte %...#.###
    !byte %..######
    !byte %...#.###

    !byte %##...#..
    !byte %.#####..
    !byte %.#####..
    !byte %##...#..
    !byte %##......
    !byte %###.....
    !byte %####....
    !byte %####....

    !byte %.......#
    !byte %......##
    !byte %.......#
    !byte %........
    !byte %.......#
    !byte %....#..#
    !byte %.....#.#
    !byte %....####

    !byte %####..#.
    !byte %#..####.
    !byte %#..####.
    !byte %####..#.
    !byte %####....
    !byte %#####...
    !byte %######..
    !byte %###.....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %........

    !byte %.#####.#
    !byte %###..###
    !byte %.##..###
    !byte %..####.#
    !byte %.#####..
    !byte %.#######
    !byte %######..
    !byte %.###....

    !byte %#..#####
    !byte %...#####
    !byte %....###.
    !byte %...#####
    !byte %#.###.##
    !byte %.###...#
    !byte %..#.....
    !byte %...#....

    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %###.....
    !byte %##......
    !byte %#.......

    !byte %...#.###
    !byte %..#..###
    !byte %......##
    !byte %......##
    !byte %.....##.
    !byte %.....##.
    !byte %...###..
    !byte %.....##.
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %..###...
    !byte %.##.....

    !byte %.....#.#
    !byte %....#..#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %######..
    !byte %#####...
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %###.....
    !byte %####....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %........
    !byte %.#####..
    !byte %.#######
    !byte %.####...
    !byte %..###...
    !byte %.##.##..
    !byte %.##.##..
    !byte %##...###
    !byte %.##.##..

    !byte %....##..
    !byte %...####.
    !byte %...##.##
    !byte %...####.
    !byte %..###..#
    !byte %..##..#.
    !byte %..###.#.
    !byte %..####.#
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##
    !byte %.....###
    !byte %.....##.
    !byte %.....###
    !byte %....###.
    !byte %....##..
    !byte %....####
    !byte %....##.#
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.##....
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %##......

    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %##......
    !byte %###.....
    !byte %#.##....
    !byte %###.##..
    !byte %#..#....
    !byte %..#.....
    !byte %#.#.....
    !byte %##.#....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..##....
    !byte %.####...
    !byte %.##.##..
    !byte %.####.##
    !byte %###..#..
    !byte %##..#...
    !byte %###.#...
    !byte %####.#..

    !byte %.##.##.#
    !byte %.##.#..#
    !byte %.##.#..#
    !byte %.##....#
    !byte %.###...#
    !byte %#.#####.
    !byte %....#...
    !byte %...####.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##
    !byte %...##.##
    !byte %...#.##.
    !byte %...##...
    !byte %...###..
    !byte %..#.####
    !byte %.....#.#
    !byte %....####
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.....##.
    !byte %.....##.
    !byte %.....##.
    !byte %.....##.
    !byte %.....###
    !byte %....#.##
    !byte %......#.
    !byte %.....###
    !byte %##.#....
    !byte %#..#....
    !byte %#..#....
    !byte %...#....
    !byte %...#....
    !byte %###.#...
    !byte %.#.#....
    !byte %###.....

    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %#.##.#..
    !byte %#..#.#..
    !byte %#..#.#..
    !byte %#....#..
    !byte %#....#..
    !byte %#####...
    !byte %.#.#..#.
    !byte %######..

    !byte %......##
    !byte %.....##.
    !byte %.....###
    !byte %......##
    !byte %.......#
    !byte %........
    !byte %#.#####.
    !byte %###...##
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %#.......

    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %..#.####
    !byte %..###...
    !byte %##......
    !byte %#.#.....
    !byte %####....
    !byte %##......
    !byte %.##.....
    !byte %..##....
    !byte %#.##....
    !byte %###.....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....#.##
    !byte %....###.
    !byte %..##....
    !byte %.##.#...
    !byte %.######.
    !byte %..##....
    !byte %...##...
    !byte %....##..
    !byte %###.##..
    !byte %..###...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %........
    !byte %......##
    !byte %......##
    !byte %....##..
    !byte %...##.#.
    !byte %...#####
    !byte %#.#.##..
    !byte %.#.#.##.
    !byte %#.#...##
    !byte %.#....##
    !byte %#....##.

    !byte %.#......
    !byte %#.#.#.#.
    !byte %.#######
    !byte %..######
    !byte %.....#..
    !byte %.....#..
    !byte %.....#..
    !byte %....#.#.
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##...
    !byte %..##....
    !byte %...#.#.#
    !byte %....#.#.
    !byte %...#.#.#
    !byte %......#.
    !byte %.....#.#
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..
    !byte %....#.#.
    !byte %.....###
    !byte %......##
    !byte %........
    !byte %.......#
    !byte %........
    !byte %........
    !byte %...#....
    !byte %#.##....
    !byte %####....
    !byte %###.....
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %........

    !byte %.......#
    !byte %......##
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....##..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %..#.....
    !byte %..#.....
    !byte %.#.#....
    !byte %........

    !byte %.....###
    !byte %....#.##
    !byte %...#..##
    !byte %...#..##
    !byte %...#..##
    !byte %....#.##
    !byte %.....###
    !byte %.......#
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.......#
    !byte %......#.
    !byte %.....#.#
    !byte %.....#.#
    !byte %.....#.#
    !byte %......#.
    !byte %.......#
    !byte %........
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##.#....
    !byte %##.#....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........
    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %.###....
    !byte %###.#...
    !byte %###..#..
    !byte %###..#..
    !byte %###..#..
    !byte %###.#...
    !byte %.###....
    !byte %...#....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...###..
    !byte %..##.##.
    !byte %.##...##
    !byte %.##...##
    !byte %.##...##
    !byte %..##.##.
    !byte %...###..
    !byte %.....#..

    !byte %.....###
    !byte %.....#.#
    !byte %.....###
    !byte %.....###
    !byte %.#..####
    !byte %.#.#####
    !byte %#######.
    !byte %..####..
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %.#......

    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %..#...##
    !byte %..#.####
    !byte %.#######
    !byte %...#####
    !byte %##......
    !byte %.#......
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %#.##....
    !byte %...#....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#....#
    !byte %..#..###
    !byte %.#######
    !byte %....####
    !byte %.###....
    !byte %.#.#....
    !byte %.###....
    !byte %#####...
    !byte %#####...
    !byte %######..
    !byte %###.##..
    !byte %##...#..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....#...
    !byte %....#...
    !byte %...#####
    !byte %......##
    !byte %...###..
    !byte %...#.#..
    !byte %...###..
    !byte %...####.
    !byte %..#####.
    !byte %########
    !byte %#####.##
    !byte %####...#

    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##..##
    !byte %..##.#..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %##......
    !byte %........
    !byte %........

    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##...
    !byte %...##..#
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........

    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......#.
    !byte %....##..
    !byte %..##....
    !byte %.#......

    !byte %##.#####
    !byte %########
    !byte %...#####
    !byte %....####
    !byte %.###.###
    !byte %########
    !byte %##.#####
    !byte %##.#####
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %..##.###
    !byte %..######
    !byte %.....###
    !byte %......##
    !byte %...###.#
    !byte %..######
    !byte %..##.###
    !byte %..##.###
    !byte %####....
    !byte %####....
    !byte %####....
    !byte %###.....
    !byte %###.....
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %...##.##
    !byte %...#####
    !byte %......##
    !byte %.......#
    !byte %....###.
    !byte %...#####
    !byte %...##.##
    !byte %...##.##
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %#####...
    !byte %#####...
    !byte %####....
    !byte %####....
    !byte %####....

    !byte %......##
    !byte %......##
    !byte %........
    !byte %........
    !byte %.......#
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %.#######
    !byte %########
    !byte %.#######
    !byte %..#####.
    !byte %##.####.
    !byte %######..
    !byte %.#####..
    !byte %.#####..

    !byte %...#####
    !byte %.#######
    !byte %.###..##
    !byte %####..##
    !byte %#######.
    !byte %#####...
    !byte %#######.
    !byte %########
    !byte %........
    !byte %##......
    !byte %###.....
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......

    !byte %.....###
    !byte %...#####
    !byte %...####.
    !byte %..#####.
    !byte %..######
    !byte %..#####.
    !byte %..######
    !byte %..######
    !byte %##......
    !byte %####....
    !byte %.###....
    !byte %.####...
    !byte %#####...
    !byte %........
    !byte %#####...
    !byte %#####...

    !byte %.......#
    !byte %.....###
    !byte %.....###
    !byte %....####
    !byte %....####
    !byte %....####
    !byte %....####
    !byte %....####
    !byte %####....
    !byte %######..
    !byte %..#####.
    !byte %..###...
    !byte %###.....
    !byte %#.......
    !byte %###.....
    !byte %#####...

    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %.#####..
    !byte %##..####
    !byte %##..###.
    !byte %######..
    !byte %####....
    !byte %###.....
    !byte %####....
    !byte %######..

    !byte %.#######
    !byte %.#######
    !byte %...#####
    !byte %....#.#.
    !byte %....#.#.
    !byte %....#.#.
    !byte %....#.#.
    !byte %...#####
    !byte %###.....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#####
    !byte %...#####
    !byte %.....###
    !byte %......#.
    !byte %......#.
    !byte %.....###
    !byte %........
    !byte %........
    !byte %####....
    !byte %####....
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....###
    !byte %.....###
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#######.
    !byte %######..
    !byte %####....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#######.
    !byte %########
    !byte %.#####..
    !byte %..#.#...
    !byte %..#.#...
    !byte %.#####..
    !byte %........
    !byte %........

    !byte %...##...
    !byte %...###..
    !byte %....#.#.
    !byte %....####
    !byte %....##..
    !byte %...###..
    !byte %...####.
    !byte %...###.#
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %.....##.
    !byte %.....###
    !byte %......#.
    !byte %......##
    !byte %......##
    !byte %.....###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %###.....
    !byte %#.......
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.#.#...
    !byte %#####...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.##.....
    !byte %.###....
    !byte %..#.#.#.
    !byte %..#####.
    !byte %..###...
    !byte %.###....

    !byte %..####..
    !byte %..####..
    !byte %..#####.
    !byte %..#####.
    !byte %.##.###.
    !byte %.#...#..
    !byte %.#....#.
    !byte %#......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###
    !byte %.....###
    !byte %....####
    !byte %....####
    !byte %....####
    !byte %...##.##
    !byte %..##..##
    !byte %.#.....#
    !byte %#.......
    !byte %.#......
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %##......

    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##
    !byte %.....###
    !byte %..#####.
    !byte %###.....
    !byte %##......
    !byte %###.....
    !byte %##.#....
    !byte %##......
    !byte %###.....
    !byte %###.....
    !byte %#####...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %.....#..
    !byte %.####...
    !byte %.###.#..
    !byte %####....
    !byte %#####...
    !byte %#####...
    !byte %#.##....
    !byte %....##..
    !byte %........

    !byte %....#...
    !byte %.....#.#
    !byte %....#...
    !byte %..#..#.#
    !byte %.#..#...
    !byte %..#....#
    !byte %.#..##..
    !byte %..##..##
    !byte %........
    !byte %........
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........

    !byte %......#.
    !byte %..#....#
    !byte %...#..#.
    !byte %..#....#
    !byte %...#..#.
    !byte %..#.....
    !byte %......##
    !byte %....##..
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %.#......
    !byte %..#.....
    !byte %........
    !byte %##......

    !byte %........
    !byte %......#.
    !byte %.....#..
    !byte %......#.
    !byte %.....#..
    !byte %......#.
    !byte %........
    !byte %......##
    !byte %.#......
    !byte %..#.....
    !byte %.#..#...
    !byte %..#..#..
    !byte %.#..#...
    !byte %.....#..
    !byte %##..#...
    !byte %..##....

    !byte %........
    !byte %.......#
    !byte %......#.
    !byte %.......#
    !byte %......#.
    !byte %.......#
    !byte %......#.
    !byte %........
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %......#.
    !byte %..##....
    !byte %##..##..

    !byte %.#...#..
    !byte %.#...#..
    !byte %#...#...
    !byte %#....#..
    !byte %.#..#...
    !byte %.#..#...
    !byte %..##..##
    !byte %....##..
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %...#....
    !byte %...#....
    !byte %..#...#.
    !byte %..#..#.#
    !byte %...##...
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %..#.....
    !byte %.##.....
    !byte %#..#....
    !byte %...#....
    !byte %..#.....
    !byte %..#.....
    !byte %##......
    !byte %........

    !byte %.....#..
    !byte %.....#..
    !byte %....#.##
    !byte %....#...
    !byte %.....#..
    !byte %.....#..
    !byte %......##
    !byte %........
    !byte %....#...
    !byte %....#...
    !byte %.#...#..
    !byte %#.##.#..
    !byte %....#...
    !byte %....#...
    !byte %..##....
    !byte %##......

    !byte %.......#
    !byte %.......#
    !byte %......#.
    !byte %......#.
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %.#....#.
    !byte %..#...#.
    !byte %...#...#
    !byte %..#....#
    !byte %...#..#.
    !byte %....#.#.
    !byte %##..##..
    !byte %..##....

    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..##....

    !byte %....##..
    !byte %....##..
    !byte %########
    !byte %....##..
    !byte %.##....#
    !byte %##.#..#.
    !byte %#.##..##
    !byte %.##....#
    !byte %........
    !byte %........
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %.#......
    !byte %#.......

    !byte %......##
    !byte %......##
    !byte %..######
    !byte %......##
    !byte %...##...
    !byte %..#..#..
    !byte %..####..
    !byte %...##...
    !byte %........
    !byte %........
    !byte %####....
    !byte %........
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....

    !byte %........
    !byte %........
    !byte %....####
    !byte %........
    !byte %.....##.
    !byte %....#.##
    !byte %....##.#
    !byte %.....##.
    !byte %##......
    !byte %##......
    !byte %######..
    !byte %##......
    !byte %...##...
    !byte %..##.#..
    !byte %..#.##..
    !byte %...##...

    !byte %........
    !byte %........
    !byte %......##
    !byte %........
    !byte %.......#
    !byte %......#.
    !byte %......##
    !byte %.......#
    !byte %..##....
    !byte %..##....
    !byte %########
    !byte %..##....
    !byte %#....##.
    !byte %.#..##.#
    !byte %##..##.#
    !byte %#....##.

    !byte %.###....
    !byte %.#.#....
    !byte %.#####..
    !byte %..##.#..
    !byte %..#####.
    !byte %..#####.
    !byte %...##...
    !byte %..####..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...###..
    !byte %...#.#..
    !byte %...#####
    !byte %....##.#
    !byte %....####
    !byte %....####
    !byte %.....##.
    !byte %....####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........

    !byte %.....###
    !byte %.....#.#
    !byte %.....###
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %.......#
    !byte %......##
    !byte %........
    !byte %........
    !byte %##......
    !byte %.#......
    !byte %###.....
    !byte %###.....
    !byte %#.......
    !byte %##......

    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %.#......
    !byte %####....
    !byte %##.#....
    !byte %#####...
    !byte %#####...
    !byte %.##.....
    !byte %####....

    !byte %.######.
    !byte %.######.
    !byte %####.###
    !byte %#####.##
    !byte %..####..
    !byte %.###.##.
    !byte %.##.###.
    !byte %.###.###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...##.##
    !byte %...##.##
    !byte %...##.##
    !byte %...###.#
    !byte %....####
    !byte %.....##.
    !byte %.....##.
    !byte %.....###
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....###
    !byte %.....###
    !byte %....####
    !byte %....####
    !byte %......##
    !byte %.....###
    !byte %.....##.
    !byte %.....###
    !byte %###.....
    !byte %###.....
    !byte %.###....
    !byte %#.##....
    !byte %##......
    !byte %.##.....
    !byte %###.....
    !byte %.###....

    !byte %.......#
    !byte %......##
    !byte %.....###
    !byte %.....##.
    !byte %........
    !byte %.......#
    !byte %......##
    !byte %......##
    !byte %#####...
    !byte %######..
    !byte %#######.
    !byte %####.##.
    !byte %#####...
    !byte %##.##.#.
    !byte %....###.
    !byte %#....#..

    !byte %....##..
    !byte %...#.##.
    !byte %..#.##.#
    !byte %.#..##..
    !byte %#...##..
    !byte %#...##..
    !byte %.#..##..
    !byte %..#.##.#
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %........

    !byte %......##
    !byte %......##
    !byte %.....#.#
    !byte %.....###
    !byte %....#.##
    !byte %....#.##
    !byte %.....###
    !byte %.....#.#
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %#.......
    !byte %#.......

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %#.......
    !byte %#.......
    !byte %##......
    !byte %##......

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %..##....
    !byte %.##.#...
    !byte %#.##.#..
    !byte %#.##.#..
    !byte %..##..#.
    !byte %..##..#.
    !byte %#.##.#..
    !byte %#.##.#..

    !byte %...#.##.
    !byte %....##..
    !byte %..##.###
    !byte %.#..##..
    !byte %.#######
    !byte %.#######
    !byte %..#.....
    !byte %...#.###
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %###.....
    !byte %.#......
    !byte %........

    !byte %......##
    !byte %......##
    !byte %....###.
    !byte %......##
    !byte %..######
    !byte %..######
    !byte %...#....
    !byte %.....###
    !byte %........
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %####....
    !byte %..#.....
    !byte %.#......

    !byte %........
    !byte %........
    !byte %.......#
    !byte %.....#..
    !byte %....####
    !byte %....####
    !byte %........
    !byte %......##
    !byte %##......
    !byte %##......
    !byte %##.#....
    !byte %##..#...
    !byte %######..
    !byte %#####...
    !byte %....#...
    !byte %#.##....

    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %......##
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %.##.#...
    !byte %..##....
    !byte %#.###...
    !byte %..##..#.
    !byte %########
    !byte %########
    !byte %........
    !byte %##.###..

    !byte %.##....#
    !byte %#.##..#.
    !byte %#.##..##
    !byte %.##....#
    !byte %....##..
    !byte %########
    !byte %.#.#..#.
    !byte %...#..#.
    !byte %#.......
    !byte %.#......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %##......
    !byte %#.......
    !byte %........

    !byte %...##...
    !byte %..#..#..
    !byte %..####..
    !byte %...##...
    !byte %......##
    !byte %..######
    !byte %...#.#..
    !byte %.....#..
    !byte %.##.....
    !byte %##.#....
    !byte %##.#....
    !byte %.##.....
    !byte %........
    !byte %####....
    !byte %#.#.....
    !byte %#.......

    !byte %.....##.
    !byte %....##.#
    !byte %....##.#
    !byte %.....##.
    !byte %........
    !byte %....####
    !byte %.....#.#
    !byte %.......#
    !byte %...##...
    !byte %..####..
    !byte %..#..#..
    !byte %...##...
    !byte %##......
    !byte %######..
    !byte %..#.#...
    !byte %..#.....

    !byte %.......#
    !byte %......##
    !byte %......#.
    !byte %.......#
    !byte %........
    !byte %......##
    !byte %.......#
    !byte %........
    !byte %#....##.
    !byte %##..#.##
    !byte %.#..#.##
    !byte %#....##.
    !byte %..##....
    !byte %########
    !byte %.#..#.#.
    !byte %.#..#...

    !byte %...#..#.
    !byte %...####.
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %....##..
    !byte %...####.
    !byte %..######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %.....#..
    !byte %.....###
    !byte %......##
    !byte %......##
    !byte %.....###
    !byte %....####
    !byte %........
    !byte %........
    !byte %#.......
    !byte %#.......
    !byte %........
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %........
    !byte %........

    !byte %.......#
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %###.....
    !byte %###.....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#..#...
    !byte %.####...
    !byte %..##....
    !byte %..##....
    !byte %.####...
    !byte %######..
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..######
    !byte %..#.....
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %####....
    !byte %.###....

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....####
    !byte %....#...
    !byte %....####
    !byte %....#...
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %######..
    !byte %...###..
    !byte %######..
    !byte %..#..#..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %......#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %.....###

    !byte %........
    !byte %........
    !byte %########
    !byte %#......#
    !byte %########
    !byte %#.....#.
    !byte %#######.
    !byte %########
    !byte %........
    !byte %........
    !byte %##......
    !byte %##......
    !byte %##......
    !byte %.#......
    !byte %.#......
    !byte %##......

    !byte %..######
    !byte %..#.....
    !byte %..######
    !byte %..######
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %####....
    !byte %#..#....
    !byte %#..#....
    !byte %####....
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %....####
    !byte %....####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %###..#..
    !byte %######..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %......##
    !byte %......#.
    !byte %......##
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %########
    !byte %....#..#
    !byte %#####..#
    !byte %########
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %....#...
    !byte %...#.#..
    !byte %..#.#.#.
    !byte %.#.#.#.#
    !byte %.#..#.#.
    !byte %#....#..
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##......

    !byte %..#.#.#.
    !byte %...#.#.#
    !byte %..#.#.#.
    !byte %...#.#.#
    !byte %..#.....
    !byte %..#.....
    !byte %..#.....
    !byte %..#.....
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...##...

    !byte %........
    !byte %...#....
    !byte %..#.#...
    !byte %.#.#.#..
    !byte %#.#.#.#.
    !byte %.#.#...#
    !byte %..#....#
    !byte %.......#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %....##..

    !byte %...#.#.#
    !byte %..#.#.#.
    !byte %...#.#.#
    !byte %..#.#.#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %#.......
    !byte %.#......
    !byte %.#......
    !byte %.#......
    !byte %.#....##

    !byte %#.......
    !byte %.#.....#
    !byte %.#######
    !byte %..######
    !byte %...#####
    !byte %....####
    !byte %....#.#.
    !byte %...#..#.
    !byte %##......
    !byte %........
    !byte %#.......
    !byte %##......
    !byte %#.......
    !byte %........
    !byte %#.......
    !byte %.#......

    !byte %..#.....
    !byte %...#....
    !byte %...#####
    !byte %....####
    !byte %.....###
    !byte %......##
    !byte %......#.
    !byte %.....#..
    !byte %...##...
    !byte %..#.....
    !byte %####....
    !byte %#####...
    !byte %####....
    !byte %###.....
    !byte %#..#....
    !byte %#...#...

    !byte %......#.
    !byte %......#.
    !byte %......##
    !byte %......##
    !byte %.......#
    !byte %........
    !byte %........
    !byte %.......#
    !byte %....##..
    !byte %...#....
    !byte %#####...
    !byte %######..
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %..#..#..

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.....##
    !byte %#....#..
    !byte %#######.
    !byte %########
    !byte %.######.
    !byte %..####..
    !byte %..#.#.#.
    !byte %.#..#..#

    !byte %.######.
    !byte %#..##..#
    !byte %########
    !byte %##.##.##
    !byte %###..###
    !byte %.######.
    !byte %..#..#..
    !byte %..#..#..
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %........
    !byte %....####
    !byte %...#..##
    !byte %...#####
    !byte %...##.##
    !byte %...###..
    !byte %....####
    !byte %....#...
    !byte %........
    !byte %##......
    !byte %..#.....
    !byte %###.....
    !byte %.##.....
    !byte %###.....
    !byte %##......
    !byte %.#......

    !byte %........
    !byte %........
    !byte %........
    !byte %.....###
    !byte %....#..#
    !byte %....####
    !byte %....##.#
    !byte %....###.
    !byte %........
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#..#....
    !byte %####....
    !byte %#.##....
    !byte %.###....

    !byte %........
    !byte %.......#
    !byte %......#.
    !byte %......##
    !byte %......##
    !byte %......##
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %#####...
    !byte %.##..#..
    !byte %######..
    !byte %.##.##..
    !byte %#..###..
    !byte %#####...
    !byte %....#...

    !byte %..#..#..
    !byte %.#....#.
    !byte %.#....#.
    !byte %.#....#.
    !byte %#......#
    !byte %#......#
    !byte %##....##
    !byte %##....##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %...#....
    !byte %...#....
    !byte %..#.....
    !byte %..#.....
    !byte %.#......
    !byte %.#......
    !byte %.##.....
    !byte %.##.....
    !byte %..#.....
    !byte %..#.....
    !byte %...#....
    !byte %...#....
    !byte %....#...
    !byte %...##...
    !byte %...##...
    !byte %........

    !byte %.....###
    !byte %....#...
    !byte %...#....
    !byte %..#.....
    !byte %.#......
    !byte %#.......
    !byte %##......
    !byte %##......
    !byte %###.....
    !byte %...#....
    !byte %....#...
    !byte %.....#..
    !byte %......#.
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %......#.
    !byte %......#.
    !byte %.....#..
    !byte %.....#..
    !byte %....#...
    !byte %....##..
    !byte %....##..
    !byte %........
    !byte %.....#..
    !byte %.....#..
    !byte %......#.
    !byte %......#.
    !byte %.......#
    !byte %.......#
    !byte %......##
    !byte %......##

    !byte %.....##.
    !byte %....##..
    !byte %...##...
    !byte %..###...
    !byte %.###.#..
    !byte %##..#.#.
    !byte %#....#.#
    !byte %......##
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#......
    !byte %###.....
    !byte %###.....

    !byte %.......#
    !byte %......##
    !byte %.....##.
    !byte %....###.
    !byte %...###.#
    !byte %..##..#.
    !byte %..#....#
    !byte %........
    !byte %#.......
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.#.....
    !byte %.###....
    !byte %####....

    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %......##
    !byte %.....##.
    !byte %.....#..
    !byte %........
    !byte %..##....
    !byte %.##.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#.#..
    !byte %..#.###.
    !byte %...####.

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.......#
    !byte %.......#
    !byte %........
    !byte %....##..
    !byte %...##...
    !byte %..##....
    !byte %.##.....
    !byte %####....
    !byte %#.#.#.#.
    !byte %...#.###
    !byte %....####

    !byte %.....###
    !byte %##..####
    !byte %##.###..
    !byte %########
    !byte %###...#.
    !byte %##..#...
    !byte %##.#.#.#
    !byte %....#...
    !byte %..#.....
    !byte %.##.....
    !byte %..#.....
    !byte %###.....
    !byte %........
    !byte %#.......
    !byte %.#......
    !byte %#.......

    !byte %.##....#
    !byte %.##...##
    !byte %.##..##.
    !byte %.#######
    !byte %.####...
    !byte %.##...#.
    !byte %.##..#.#
    !byte %......#.
    !byte %#..#....
    !byte %#.##....
    !byte %...#....
    !byte %####....
    !byte %#.......
    !byte %..#.....
    !byte %.#.#....
    !byte %..#.....

    !byte %..##....
    !byte %..##....
    !byte %..##....
    !byte %..######
    !byte %..#####.
    !byte %..##....
    !byte %..##....
    !byte %........
    !byte %..##..#.
    !byte %.###.##.
    !byte %##....#.
    !byte %#######.
    !byte %...#....
    !byte %.#...#..
    !byte %#.#.#.#.
    !byte %.#...#..

    !byte %........
    !byte %.....##.
    !byte %.....##.
    !byte %.....###
    !byte %.....###
    !byte %.....##.
    !byte %.....##.
    !byte %........
    !byte %...##..#
    !byte %..###.##
    !byte %.#.....#
    !byte %########
    !byte %#...#...
    !byte %..#...#.
    !byte %.#.#.#.#
    !byte %..#...#.

skylab4Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.

    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %##..##..
    !byte %.##..##.
    !byte %........
    !byte %##..##..
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..
    !byte %###.###.
    !byte %.#...#..
    !byte %#..##..#
    !byte %.#...#..

    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %.#...#..
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %........
    !byte %..#...#.
    !byte %.#...#..
    !byte %#...#...

skylab5Sprite
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#...#...
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........

    !byte %..#...#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %...#...#
    !byte %#..##..#
    !byte %.##..##.
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %........
    !byte %.###.###
    !byte %##.###.#
    !byte %.###.###
    !byte %.#...#..

    !byte %........
    !byte %........
    !byte %........
    !byte %..#...#.
    !byte %...#...#
    !byte %..#...#.
    !byte %#...#...
    !byte %###.###.
    !byte %........
    !byte %........
    !byte %.#...#..
    !byte %..#...#.
    !byte %.#...#..
    !byte %........
    !byte %........
    !byte %........

eugeneSprite
    !byte %........            ;
    !byte %......##            ;       ####
    !byte %....####            ;     ########
    !byte %...#####            ;    ##########
    !byte %..##...#            ;   ##   ##   ##
    !byte %....###.            ;     ###  ###
    !byte %.##.####            ;  ## ######## ##
    !byte %#.#.###.            ; # # ###  ### # #
    !byte %........            ; # ##   ##   ## #
    !byte %##......            ; #  ##########  #
    !byte %####....            ; #  ## #### ##  #
    !byte %#####...            ; #   ##    ##   #
    !byte %#...##..            ;  #   ######   #
    !byte %.###....            ;       #  #
    !byte %####.##.            ;     ###  ###
    !byte %.###.#.#            ;

    !byte %#.##...#
    !byte %#..#####
    !byte %#..##.##
    !byte %#...##..
    !byte %.#...###
    !byte %......#.
    !byte %....###.
    !byte %........
    !byte %#...##.#
    !byte %#####..#
    !byte %##.##..#
    !byte %..##...#
    !byte %###...#.
    !byte %.#......
    !byte %.###....
    !byte %........

pedestalSprite
    !byte %########            ; ################
    !byte %.###..#.            ;  ###  #  #  ###
    !byte %#...#.#.            ; #   # #  # #   #
    !byte %#.#.#.#.            ; # # # #  # # # #
    !byte %.#..#.#.            ;  #  # #  # #  #
    !byte %...#..#.            ;    #  #  #  #
    !byte %..#...#.            ;   #   #  #   #
    !byte %..#.#.#.            ;   # # #  # # #
    !byte %########            ;   # # #  # # #
    !byte %.#..###.            ;   # # #  # # #
    !byte %.#.#...#            ;   # # #  # # #
    !byte %.#.#.#.#            ;   # # #  # # #
    !byte %.#.#..#.            ;   # # #  # # #
    !byte %.#..#...            ;   # # #  # # #
    !byte %.#...#..            ;   # # #  # # #
    !byte %.#.#.#..            ; ################

    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %..#.#.#.
    !byte %########
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %.#.#.#..
    !byte %########

    !byte %........
    !byte %........
    !byte %....#...
    !byte %.......#
    !byte %........
    !byte %..#.....
    !byte %......#.
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......
    !byte %........
    !byte %.....#..
    !byte %..#...#.

    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %##..###.
    !byte %.##..#..
    !byte %....#..#
    !byte %##...#..
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %.....#..
    !byte %........
    !byte %......#.
    !byte %#....#..
    !byte %.#..#...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......#.
    !byte %...#....
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %#.......

    !byte %..#.....
    !byte %........
    !byte %......#.
    !byte %........
    !byte %.....###
    !byte %...###.#
    !byte %#..#.###
    !byte %.##..#..
    !byte %........
    !byte %........
    !byte %.....#..
    !byte %..#...#.
    !byte %...#.#..
    !byte %..#.....
    !byte %#.......
    !byte %###.....

kongBeastSprite
    !byte %...#..##
    !byte %...###.#
    !byte %....####
    !byte %.....##.
    !byte %.....#.#
    !byte %......#.
    !byte %.....###
    !byte %....####
    !byte %##..#...
    !byte %#.###...
    !byte %####....
    !byte %.##.....
    !byte %#.#.....
    !byte %.#......
    !byte %###.....
    !byte %####....

    !byte %...#####
    !byte %..##..##
    !byte %.##...##
    !byte %.#...##.
    !byte %..#.##..
    !byte %.....##.
    !byte %......#.
    !byte %....###.
    !byte %#####...
    !byte %##..##..
    !byte %##...##.
    !byte %.##...#.
    !byte %..##.#..
    !byte %.##.....
    !byte %.#......
    !byte %.###....

    !byte %....#.##
    !byte %....##.#
    !byte %....####
    !byte %.....##.
    !byte %.....#.#
    !byte %......#.
    !byte %......##
    !byte %...#####
    !byte %##.#....
    !byte %#.##....
    !byte %####....
    !byte %.##.....
    !byte %#.#.....
    !byte %.#......
    !byte %##......
    !byte %#####...

    !byte %.#######
    !byte %###..###
    !byte %#.....##
    !byte %##...###
    !byte %.....##.
    !byte %....##..
    !byte %....#...
    !byte %..###...
    !byte %#######.
    !byte %###..###
    !byte %##.....#
    !byte %###...##
    !byte %.##.....
    !byte %..##....
    !byte %...#....
    !byte %...###..

    !byte %...###..
    !byte %.....##.
    !byte %....##..
    !byte %.....##.
    !byte %.##...##
    !byte %..#..###
    !byte %.##..###
    !byte %..##.###
    !byte %..###...
    !byte %.##.....
    !byte %..##....
    !byte %.##.....
    !byte %##...##.
    !byte %###..#..
    !byte %###..##.
    !byte %###.##..

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %.....##.
    !byte %....####
    !byte %....##.#
    !byte %....#.##
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.....
    !byte %####....
    !byte %#.##....
    !byte %##.#....

    !byte %.###....
    !byte %...##...
    !byte %....##..
    !byte %.....##.
    !byte %.##...##
    !byte %..#..###
    !byte %.##..###
    !byte %..##.###
    !byte %....###.
    !byte %...##...
    !byte %..##....
    !byte %.##.....
    !byte %##...##.
    !byte %###..#..
    !byte %###..##.
    !byte %###.##..

    !byte %...#####
    !byte %....####
    !byte %......#.
    !byte %.....#.#
    !byte %...#.##.
    !byte %....####
    !byte %....##.#
    !byte %.....###
    !byte %#####...
    !byte %####....
    !byte %.#......
    !byte %#.#.....
    !byte %.##.#...
    !byte %####....
    !byte %#.##....
    !byte %###.....

    !byte %........
    !byte %........
    !byte %..######
    !byte %.##...##
    !byte %###.#.##
    !byte %###.#...
    !byte %....####
    !byte %.....###
    !byte %........
    !byte %........
    !byte %######..
    !byte %##...##.
    !byte %##.#.###
    !byte %...#.###
    !byte %####....
    !byte %###.....

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %..####..
    !byte %.#######
    !byte %.#######
    !byte %.##...##
    !byte %....#...
    !byte %....#...
    !byte %....####
    !byte %.....###
    !byte %........
    !byte %##......
    !byte %#####...
    !byte %##...##.
    !byte %.#.#.###
    !byte %...#.###
    !byte %####.###
    !byte %###.....

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........
    !byte %........
    !byte %..######
    !byte %.##...##
    !byte %###.#...
    !byte %###.#...
    !byte %....####
    !byte %.....###
    !byte %........
    !byte %........
    !byte %######..
    !byte %##...##.
    !byte %...#.###
    !byte %...#.###
    !byte %####....
    !byte %###.....

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........
    !byte %......##
    !byte %...#####
    !byte %.##...##
    !byte %###.#...
    !byte %###.#...
    !byte %###.####
    !byte %.....###
    !byte %..####..
    !byte %#######.
    !byte %#######.
    !byte %##...##.
    !byte %...#....
    !byte %...#....
    !byte %####....
    !byte %###.....

    !byte %....##..
    !byte %....#.##
    !byte %...##.##
    !byte %...###..
    !byte %..######
    !byte %..######
    !byte %..######
    !byte %........
    !byte %..##....
    !byte %##.#....
    !byte %##.##...
    !byte %..###...
    !byte %######..
    !byte %######..
    !byte %######..
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %....##..
    !byte %...#....
    !byte %..#.....
    !byte %.#......
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %..##....
    !byte %....#...
    !byte %.....#..
    !byte %......#.

    !byte %#.......
    !byte %.#......
    !byte %..#.....
    !byte %##.#....
    !byte %..#.##..
    !byte %.#..#.##
    !byte %...#..#.
    !byte %......#.
    !byte %.......#
    !byte %......#.
    !byte %.....#..
    !byte %....#.##
    !byte %..##.#..
    !byte %##.#..#.
    !byte %.#..#...
    !byte %.#......

    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %....##..
    !byte %...#....
    !byte %..#.....
    !byte %.#......
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %..##....
    !byte %....#...
    !byte %.....#..
    !byte %......#.

    !byte %#####...
    !byte %.#.#.###
    !byte %..#.#.##
    !byte %...#..#.
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %...#####
    !byte %###.#.#.
    !byte %##.#.#..
    !byte %.#..#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %.....#..
    !byte %.....#..
    !byte %...#..#.
    !byte %.#..#.##
    !byte %..#.##..
    !byte %#..#..##
    !byte %#.#..###
    !byte %.#...##.
    !byte %..#.....
    !byte %..#.....
    !byte %.#..#...
    !byte %##.#..#.
    !byte %..##.#..
    !byte %##..#..#
    !byte %###..#.#
    !byte %.##...#.

    !byte %#....##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.##....#
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %....##..
    !byte %...#..#.
    !byte %..#.#.#.
    !byte %.#.#####
    !byte %........
    !byte %........
    !byte %........
    !byte %##......
    !byte %..##....
    !byte %.#..#...
    !byte %.#.#.#..
    !byte %#####.#.

    !byte %####.##.
    !byte %.#...###
    !byte %..#...##
    !byte %...#....
    !byte %....##..
    !byte %......##
    !byte %........
    !byte %........
    !byte %.#######
    !byte %###...#.
    !byte %##...#..
    !byte %....#...
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........

    !byte %......##
    !byte %########
    !byte %#.#.#.##
    !byte %########
    !byte %...#..##
    !byte %..#.#..#
    !byte %...#.#.#
    !byte %....#.##
    !byte %##......
    !byte %########
    !byte %##.#.#.#
    !byte %########
    !byte %##..#...
    !byte %#..#.#..
    !byte %#.#.#...
    !byte %##.#....

    !byte %.....#.#
    !byte %......##
    !byte %......##
    !byte %.....#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %..#.#...
    !byte %...#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.....
    !byte %.#.#....
    !byte %..#.#...
    !byte %...#.#..
    !byte %....#...

    !byte %........
    !byte %........
    !byte %......##
    !byte %########
    !byte %#.#.#.##
    !byte %########
    !byte %...#..##
    !byte %..#.#..#
    !byte %........
    !byte %........
    !byte %##......
    !byte %########
    !byte %##.#.#.#
    !byte %########
    !byte %##..#...
    !byte %#..#.#..

    !byte %...#.#.#
    !byte %....#.##
    !byte %.....#.#
    !byte %......##
    !byte %..#...##
    !byte %.#...#.#
    !byte %....#.#.
    !byte %...#.#..
    !byte %#.#.#...
    !byte %##.#....
    !byte %#.#.....
    !byte %##......
    !byte %##......
    !byte %#.#.#...
    !byte %.#.#.#..
    !byte %..#.#...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %########
    !byte %#.#.#.##
    !byte %########
    !byte %........
    !byte %........
    !byte %........
    !byte %.....###
    !byte %######.#
    !byte %##.#.###
    !byte %#####...
    !byte %##......

    !byte %......##
    !byte %.......#
    !byte %...#.#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %..#...##
    !byte %....#.##
    !byte %..#..#.#
    !byte %##......
    !byte %#.......
    !byte %#.#..#..
    !byte %##.#..#.
    !byte %#.#..#..
    !byte %##....#.
    !byte %##.#....
    !byte %#.#.#...

    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %...#####
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %........
    !byte %##...###
    !byte %######.#

    !byte %##..#.##
    !byte %#.#..###
    !byte %###...##
    !byte %.......#
    !byte %..#..#.#
    !byte %.#..#.##
    !byte %.....#.#
    !byte %.#.#..##
    !byte %##.#.###
    !byte %#####...
    !byte %##......
    !byte %#.....#.
    !byte %#.#..#.#
    !byte %##.#....
    !byte %#.#...#.
    !byte %##...#..

    !byte %.##....#
    !byte %#..#####
    !byte %#..#####
    !byte %.##....#
    !byte %.....###
    !byte %########
    !byte %#.......
    !byte %#.#.#.#.
    !byte %#....##.
    !byte %#####..#
    !byte %#####..#
    !byte %#....##.
    !byte %###.....
    !byte %########
    !byte %.......#
    !byte %#.#.#..#

    !byte %#..#####
    !byte %#.##.#.#
    !byte %#..#....
    !byte %#.##.#.#
    !byte %#..#####
    !byte %#.#.#.#.
    !byte %#.......
    !byte %########
    !byte %######.#
    !byte %.#.##..#
    !byte %....##.#
    !byte %.#.##..#
    !byte %######.#
    !byte %#.#.#..#
    !byte %.......#
    !byte %########

    !byte %...###.#
    !byte %..#...#.
    !byte %..#...#.
    !byte %...###.#
    !byte %......##
    !byte %########
    !byte %##.#.#.#
    !byte %#.######
    !byte %#.###...
    !byte %###..#..
    !byte %###..#..
    !byte %#.###...
    !byte %##......
    !byte %########
    !byte %.#.#.#.#
    !byte %########

    !byte %###.#.#.
    !byte %#.##....
    !byte %###..#.#
    !byte %#.##....
    !byte %###.#.#.
    !byte %#.######
    !byte %##.#.#.#
    !byte %########
    !byte %#.#.##.#
    !byte %.....###
    !byte %.#..##.#
    !byte %.....###
    !byte %#.#.##.#
    !byte %########
    !byte %.#.#.#.#
    !byte %########

    !byte %.....###
    !byte %....#...
    !byte %....#...
    !byte %.....###
    !byte %......##
    !byte %########
    !byte %########
    !byte %##.#.#.#
    !byte %###.....
    !byte %...#....
    !byte %...#....
    !byte %###.....
    !byte %##......
    !byte %########
    !byte %########
    !byte %.#.#.###

    !byte %###.....
    !byte %##..#.#.
    !byte %###..###
    !byte %##..#.#.
    !byte %###.....
    !byte %##.#.#.#
    !byte %########
    !byte %########
    !byte %......##
    !byte %#.#..###
    !byte %####..##
    !byte %..#..###
    !byte %......##
    !byte %.#.#.###
    !byte %########
    !byte %########

    !byte %...###.#
    !byte %..#.####
    !byte %..#.####
    !byte %...###.#
    !byte %......##
    !byte %########
    !byte %#.#.#.#.
    !byte %##......
    !byte %#.###...
    !byte %.#...#..
    !byte %.#...#..
    !byte %#.###...
    !byte %##......
    !byte %########
    !byte %#.#.#.##
    !byte %.......#

    !byte %#..#.#.#
    !byte %##..####
    !byte %#..##...
    !byte %##..####
    !byte %#..#.#.#
    !byte %##......
    !byte %#.#.#.#.
    !byte %########
    !byte %.#.#..##
    !byte %#####..#
    !byte %...#..##
    !byte %#####..#
    !byte %.#.#..##
    !byte %.......#
    !byte %#.#.#.##
    !byte %########

    !byte %........
    !byte %........
    !byte %........
    !byte %......##
    !byte %....##..
    !byte %..##...#
    !byte %##...##.
    !byte %#..##..#
    !byte %....###.
    !byte %..##..##
    !byte %##...#.#
    !byte %...##..#
    !byte %.##..#.#
    !byte %#..###.#
    !byte %.#####.#
    !byte %#..###.#

    !byte %##...##.
    !byte %####...#
    !byte %.#####..
    !byte %...#####
    !byte %.....###
    !byte %.......#
    !byte %........
    !byte %........
    !byte %...###.#
    !byte %#..###.#
    !byte %.#####.#
    !byte %...###.#
    !byte %##.###.#
    !byte %######.#
    !byte %.#######
    !byte %...####.

    !byte %......##
    !byte %.....###
    !byte %.....##.
    !byte %....###.
    !byte %....##..
    !byte %...###.#
    !byte %...##..#
    !byte %..###.#.
    !byte %##......
    !byte %.#......
    !byte %..#.....
    !byte %#.#.....
    !byte %#..#....
    !byte %.#.#....
    !byte %.#..#...
    !byte %..#.#...

    !byte %..##..#.
    !byte %.###.#..
    !byte %.##..#..
    !byte %########
    !byte %########
    !byte %########
    !byte %.#......
    !byte %.#######
    !byte %..#..#..
    !byte %...#.#..
    !byte %...#..#.
    !byte %###.#.#.
    !byte %###.#..#
    !byte %####.#.#
    !byte %......##
    !byte %#######.

    !byte %..###...
    !byte %#######.
    !byte %#.######
    !byte %#.###.##
    !byte %#.###...
    !byte %#.#####.
    !byte %#.###..#
    !byte %#.###...
    !byte %........
    !byte %........
    !byte %#.......
    !byte %###.....
    !byte %#####...
    !byte %..#####.
    !byte %#...####
    !byte %.##...##

    !byte %#.###..#
    !byte %#.#####.
    !byte %#.###..#
    !byte %#.#..##.
    !byte %#..##...
    !byte %#.#...##
    !byte %##..##..
    !byte %.###....
    !byte %#..##..#
    !byte %.##...##
    !byte %#...##..
    !byte %..##....
    !byte %##......
    !byte %........
    !byte %........
    !byte %........

    !byte %.#######
    !byte %#.......
    !byte %#.#.####
    !byte %#..#.###
    !byte %.#.#.###
    !byte %.#..#.#.
    !byte %..#.#.#.
    !byte %..#..#.#
    !byte %#######.
    !byte %......#.
    !byte %########
    !byte %########
    !byte %########
    !byte %..#..##.
    !byte %..#.###.
    !byte %.#..##..

    !byte %...#.#.#
    !byte %...#..#.
    !byte %....#.#.
    !byte %....#..#
    !byte %.....#.#
    !byte %.....#..
    !byte %......#.
    !byte %......##
    !byte %.#.###..
    !byte %#..##...
    !byte %#.###...
    !byte %..##....
    !byte %.###....
    !byte %.##.....
    !byte %###.....
    !byte %##......

    ; $7e80
; ***************************************************************************************
animateLevel19EnergyFields
    lda currentLevel                    ;
    cmp #19                             ;
    beq level19EnergyFields             ;
    rts                                 ;

level19EnergyFields
    inc energyFieldTimer                ;
    jsr swapEnergyFieldSpritesWith0C00  ;
    lda energyFieldTimer                ;
    and #$10                            ;
    cmp #0                              ;
    beq toggleEnergyField               ;
    lda #0                              ;
    sta energyFieldSpriteOffset         ;
    lda energyFieldTimer                ;
    and #1                              ;
    cmp #0                              ;
    beq setEnergyFieldColour            ;
    lda #2                              ;
    sta energyFieldSpriteOffset         ;
setEnergyFieldColour
    lda #17                             ;
    jsr OSWRCH                          ; COLOUR 2
    lda #2                              ;
    jsr OSWRCH                          ;
    ldx #0                              ;
-
    lda energyFieldString,x             ;
    cmp #$2a                            ;
    beq drawEnergyField                 ;
continueEnergyFieldString
    jsr OSWRCH                          ;
    inx                                 ;
    cpx #16                             ;
    bne -                               ; loop for length of message
    jmp swapEnergyFieldSpritesWith0C00  ;

drawEnergyField
    lda #$e0                            ;
    clc                                 ;
    adc energyFieldSpriteOffset         ;
    tay                                 ;
    iny                                 ;
    jsr OSWRCH                          ;
    lda #$0a                            ;
    jsr OSWRCH                          ;
    lda #8                              ;
    jsr OSWRCH                          ;
    tya                                 ;
    jmp continueEnergyFieldString       ;

toggleEnergyField
    lda #4                              ;
    sta energyFieldSpriteOffset         ;
    lda energyFieldTimer                ;
    and #$0f                            ;
    cmp #0                              ;
    beq setEnergyFieldColour            ;
    jmp swapEnergyFieldSpritesWith0C00  ;

energyFieldTimer
    !byte $ea                           ;
energyFieldString
    !byte $1f, 15, 5                    ; TAB(15, 5)
    !byte $2a                           ;
    !byte $1f, 15, 9                    ; TAB(15, 9)
    !byte $2a                           ;
    !byte $1f, 24, 5                    ;
    !byte $2a                           ;
    !byte $1f, 24, 9                    ; TAB(24, 9)
    !byte $2a                           ;

    ; [unused]
    !byte $10                           ;
    !byte $c0                           ;

    !byte %....#.#.             ; ....#.#...#.....
    !byte %...#.##.             ; ...#.##..##.#...
    !byte %.......#             ; .......#.#.#....
    !byte %..###..#             ; ..###..#.##...#.
    !byte %.##..#.#             ; .##..#.###..###.
    !byte %......##             ; ......####.#....
    !byte %########             ; ###########.###.
    !byte %#....###             ; #....#######...#
    !byte %..#.....             ; .###.#######.#..
    !byte %.##.#...             ; ##...###########
    !byte %.#.#....             ; #...#.######...#
    !byte %.##...#.             ; ..##..#.#.#.##..
    !byte %##..###.             ; .##..#..#.#..##.
    !byte %##.#....             ; .#..#..##.#...#.
    !byte %###.###.             ; ...#..#.#..#....
    !byte %####...#             ; ..##.##.#..##...

    !byte %.###.###
    !byte %##...###
    !byte %#...#.##
    !byte %..##..#.
    !byte %.##..#..
    !byte %.#..#..#
    !byte %...#..#.
    !byte %..##.##.
    !byte %####.#..
    !byte %########
    !byte %####...#
    !byte %#.#.##..
    !byte %#.#..##.
    !byte %#.#...#.
    !byte %#..#....
    !byte %#..##...

    !byte %........
    !byte %.....#.#
    !byte %......##
    !byte %..##...#
    !byte %...###.#
    !byte %......##
    !byte %..######
    !byte %......##
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %.###.#..
    !byte %##..##..
    !byte %##.#....
    !byte %###.##..
    !byte %####.#..

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........
    !byte %........
    !byte %......#.
    !byte %....#..#
    !byte %.....#.#
    !byte %......##
    !byte %...#####
    !byte %.....###
    !byte %........
    !byte %........
    !byte %..#.....
    !byte %.##.....
    !byte %##..#...
    !byte %##.#....
    !byte %###.....
    !byte %#####...

    !byte %...#####
    !byte %...#.###
    !byte %....####
    !byte %...#..#.
    !byte %.....#.#
    !byte %....#.#.
    !byte %........
    !byte %........
    !byte %###.....
    !byte %#####...
    !byte %####....
    !byte %#.#.#...
    !byte %#.#.....
    !byte %#.##....
    !byte %##......
    !byte %........

    !byte %........
    !byte %.....#.#
    !byte %......##
    !byte %..##...#
    !byte %...###.#
    !byte %......##
    !byte %..######
    !byte %......##
    !byte %........
    !byte %..#.....
    !byte %.#......
    !byte %.###.#..
    !byte %##..##..
    !byte %##.#....
    !byte %###.##..
    !byte %####.#..

    !byte %..######
    !byte %.##..###
    !byte %....#.##
    !byte %..##..#.
    !byte %..#..#..
    !byte %....#.##
    !byte %...##.#.
    !byte %........
    !byte %###.....
    !byte %######..
    !byte %####..#.
    !byte %#.#.##..
    !byte %#.#..#..
    !byte %#..#....
    !byte %##.##...
    !byte %##......

    !byte %........
    !byte %....##..
    !byte %......#.
    !byte %.......#
    !byte %.....###
    !byte %.##.####
    !byte %...##..#
    !byte %....#.#.
    !byte %........
    !byte %..##....
    !byte %.#......
    !byte %#.......
    !byte %###.....
    !byte %####.##.
    !byte %#..##...
    !byte %.#.#....

    !byte %#####..#
    !byte %...####.
    !byte %...###..
    !byte %.#####..
    !byte %#..##.##
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..#####
    !byte %.####...
    !byte %..###...
    !byte %..#.###.
    !byte %##.##..#
    !byte %#.##....
    !byte %###.....
    !byte %#.......

    !byte %........
    !byte %........
    !byte %....###.
    !byte %.#.....#
    !byte %..#..###
    !byte %...#####
    !byte %#...#..#
    !byte %.####.#.
    !byte %........
    !byte %........
    !byte %.###....
    !byte %#.....#.
    !byte %###..#..
    !byte %#####...
    !byte %#..#...#
    !byte %.#.####.

    !byte %...##..#
    !byte %...####.
    !byte %######..
    !byte %...#.#..
    !byte %...#####
    !byte %....##..
    !byte %.....###
    !byte %.......#
    !byte %#..##...
    !byte %.####...
    !byte %..######
    !byte %..#.#...
    !byte %##.##...
    !byte %.###....
    !byte %###.....
    !byte %#.......

    !byte %........
    !byte %....##..
    !byte %......#.
    !byte %.......#
    !byte %.....###
    !byte %.#..####
    !byte %..######
    !byte %....###.
    !byte %........
    !byte %..##....
    !byte %.#......
    !byte %#.......
    !byte %###.....
    !byte %####..#.
    !byte %######..
    !byte %.###....

    !byte %##.##..#
    !byte %..#####.
    !byte %...###..
    !byte %.###.#..
    !byte %#..##.##
    !byte %....###.
    !byte %.....###
    !byte %.......#
    !byte %#..##.##
    !byte %.#####..
    !byte %..###...
    !byte %..#.###.
    !byte %#####.##
    !byte %..##....
    !byte %###.....
    !byte %#.......

    !byte %.....#..
    !byte %.....#..
    !byte %......#.
    !byte %.......#
    !byte %.....###
    !byte %....####
    !byte %.#######
    !byte %....#.#.
    !byte %..#.....
    !byte %..#.....
    !byte %.#......
    !byte %#.......
    !byte %###.....
    !byte %####....
    !byte %#######.
    !byte %.#.#...#

    !byte %....#..#
    !byte %.######.
    !byte %#..###..
    !byte %...#.#..
    !byte %..###.##
    !byte %.#..##.#
    !byte %.#...###
    !byte %.......#
    !byte %#..##...
    !byte %.######.
    !byte %..###..#
    !byte %..#.#...
    !byte %##.###..
    !byte %..##..#.
    !byte %###...#.
    !byte %#.......
}
